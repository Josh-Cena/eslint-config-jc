"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[877],{9829:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var n=t(2685),r=(t(7378),t(5318));const l={sidebar_position:3},o="Variables & names",s={unversionedId:"eslint-base/variables-names",id:"eslint-base/variables-names",title:"Variables & names",description:"This page discusses rules around variable declaration, use of properties, and naming.",source:"@site/../docs/eslint-base/variables-names.md",sourceDirName:"eslint-base",slug:"/eslint-base/variables-names",permalink:"/js-style-guide/eslint-base/variables-names",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Literals",permalink:"/js-style-guide/eslint-base/literals"},next:{title:"Operators",permalink:"/js-style-guide/eslint-base/operators"}},i={},p=[{value:"Variable declarations",id:"variable-declarations",level:2},{value:"<code>block-scoped-var</code>",id:"block-scoped-var",level:3},{value:"<code>init-declarations</code>",id:"init-declarations",level:3},{value:"<code>no-const-assign</code>",id:"no-const-assign",level:3},{value:"<code>no-implicit-globals</code>",id:"no-implicit-globals",level:3},{value:"<code>no-var</code>",id:"no-var",level:3},{value:"<code>no-undef-init</code>",id:"no-undef-init",level:3},{value:"<code>no-useless-rename</code>",id:"no-useless-rename",level:3},{value:"<code>one-var</code>",id:"one-var",level:3},{value:"<code>prefer-const</code>",id:"prefer-const",level:3},{value:"<code>prefer-destructuring</code>",id:"prefer-destructuring",level:3},{value:"<code>vars-on-top</code>",id:"vars-on-top",level:3},{value:"Naming conventions",id:"naming-conventions",level:2},{value:"<code>camelcase</code>",id:"camelcase",level:3},{value:"<code>id-denylist</code>",id:"id-denylist",level:3},{value:"<code>id-length</code>",id:"id-length",level:3},{value:"<code>id-match</code>",id:"id-match",level:3},{value:"<code>no-shadow-restricted-names</code>",id:"no-shadow-restricted-names",level:3},{value:"<code>no-underscore-dangle</code>",id:"no-underscore-dangle",level:3},{value:"Globals",id:"globals",level:2},{value:"<code>no-alert</code>",id:"no-alert",level:3},{value:"<code>no-console</code>",id:"no-console",level:3},{value:"<code>no-eval</code>",id:"no-eval",level:3},{value:"<code>no-global-assign</code>",id:"no-global-assign",level:3},{value:"<code>no-implied-eval</code>",id:"no-implied-eval",level:3},{value:"<code>no-iterator</code>",id:"no-iterator",level:3},{value:"<code>no-new-func</code>",id:"no-new-func",level:3},{value:"<code>no-new-native-nonconstructor</code>",id:"no-new-native-nonconstructor",level:3},{value:"<code>no-new-wrappers</code>",id:"no-new-wrappers",level:3},{value:"<code>no-obj-calls</code>",id:"no-obj-calls",level:3},{value:"<code>no-object-constructor</code>",id:"no-object-constructor",level:3},{value:"<code>no-proto</code>",id:"no-proto",level:3},{value:"<code>no-prototype-builtins</code>",id:"no-prototype-builtins",level:3},{value:"<code>no-restricted-properties</code>",id:"no-restricted-properties",level:3},{value:"<code>no-undef</code>",id:"no-undef",level:3},{value:"<code>no-undefined</code>",id:"no-undefined",level:3},{value:"<code>prefer-object-has-own</code>",id:"prefer-object-has-own",level:3}],d={toc:p},c="wrapper";function m(e){let{components:a,...t}=e;return(0,r.kt)(c,(0,n.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"variables--names"},"Variables & names"),(0,r.kt)("p",null,"This page discusses rules around variable declaration, use of properties, and naming."),(0,r.kt)("h2",{id:"variable-declarations"},"Variable declarations"),(0,r.kt)("h3",{id:"block-scoped-var"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/block-scoped-var"},(0,r.kt)("inlineCode",{parentName:"a"},"block-scoped-var"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error")),(0,r.kt)("p",null,"Because ",(0,r.kt)("inlineCode",{parentName:"p"},"var"),"s are forbidden altogether, this rule is mostly moot. In the rare case where you need to use ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," (such as to declare globals), such vars should not be deceptively inside a block."),(0,r.kt)("h3",{id:"init-declarations"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/init-declarations"},(0,r.kt)("inlineCode",{parentName:"a"},"init-declarations"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error"),(0,r.kt)("li",{parentName:"ul"},"Configuration:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Require variables to be initialized (",(0,r.kt)("inlineCode",{parentName:"li"},'"always"'),")"))),(0,r.kt)("li",{parentName:"ul"},"Related:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"@typescript-eslint/init-declarations")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ts(2454): Variable 'a' is used before being assigned."))))),(0,r.kt)("p",null,"We require variables to be initialized. Otherwise, it's possible to circumvent TypeScript:"),(0,r.kt)("div",{className:"shiki-twoslash-fragment"},(0,r.kt)("pre",{parentName:"div",className:"shiki github-light twoslash lsp",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,r.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.kt)("div",{parentName:"pre",className:"code-container"},(0,r.kt)("code",{parentName:"div"},(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#CF222E"}},"let"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," ",(0,r.kt)("data-lsp",{parentName:"span",lsp:"let a: number"},"a")),(0,r.kt)("span",{parentName:"div",style:{color:"#CF222E"}},":"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#0550AE"}},"number"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},";")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#CF222E"}},"function"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#8250DF"}},(0,r.kt)("data-lsp",{parentName:"span",lsp:"function useA(): void"},"useA")),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"() {")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"  ",(0,r.kt)("data-lsp",{parentName:"span",lsp:"namespace console\nvar console: Console"},"console"),"."),(0,r.kt)("span",{parentName:"div",style:{color:"#8250DF"}},(0,r.kt)("data-lsp",{parentName:"span",lsp:"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)"},"log")),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"(",(0,r.kt)("data-lsp",{parentName:"span",lsp:"let a: number"},"a"),"); "),(0,r.kt)("span",{parentName:"div",style:{color:"#6E7781"}},"// -> undefined")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"}")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#8250DF"}},(0,r.kt)("data-lsp",{parentName:"span",lsp:"function useA(): void"},"useA")),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"();")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},(0,r.kt)("data-lsp",{parentName:"span",lsp:"let a: number"},"a")," "),(0,r.kt)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#0550AE"}},"1"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},";"))))),(0,r.kt)("pre",{parentName:"div",className:"shiki github-dark twoslash lsp",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,r.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.kt)("div",{parentName:"pre",className:"code-container"},(0,r.kt)("code",{parentName:"div"},(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#FF7B72"}},"let"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," ",(0,r.kt)("data-lsp",{parentName:"span",lsp:"let a: number"},"a")),(0,r.kt)("span",{parentName:"div",style:{color:"#FF7B72"}},":"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#79C0FF"}},"number"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#FF7B72"}},"function"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#D2A8FF"}},(0,r.kt)("data-lsp",{parentName:"span",lsp:"function useA(): void"},"useA")),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"() {")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  ",(0,r.kt)("data-lsp",{parentName:"span",lsp:"namespace console\nvar console: Console"},"console"),"."),(0,r.kt)("span",{parentName:"div",style:{color:"#D2A8FF"}},(0,r.kt)("data-lsp",{parentName:"span",lsp:"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)"},"log")),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"(",(0,r.kt)("data-lsp",{parentName:"span",lsp:"let a: number"},"a"),"); "),(0,r.kt)("span",{parentName:"div",style:{color:"#8B949E"}},"// -> undefined")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"}")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#D2A8FF"}},(0,r.kt)("data-lsp",{parentName:"span",lsp:"function useA(): void"},"useA")),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"();")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},(0,r.kt)("data-lsp",{parentName:"span",lsp:"let a: number"},"a")," "),(0,r.kt)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#79C0FF"}},"1"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")))))),(0,r.kt)("p",null,"You should almost always initialize variables upfront (and use ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," where possible). Use ternaries instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"if...else"),". If you need to lazy initialize a variable, initialize it to ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),", so that you remember to explicitly check for ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," before using it."),(0,r.kt)("h3",{id:"no-const-assign"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-const-assign"},(0,r.kt)("inlineCode",{parentName:"a"},"no-const-assign"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error"),(0,r.kt)("li",{parentName:"ul"},"Related:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ts(2588): Cannot assign to 'a' because it is a constant."))))),(0,r.kt)("p",null,"Re-assigning const variables causes a runtime error."),(0,r.kt)("div",{className:"shiki-twoslash-fragment"},(0,r.kt)("pre",{parentName:"div",className:"shiki github-light twoslash lsp",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,r.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.kt)("div",{parentName:"pre",className:"code-container"},(0,r.kt)("code",{parentName:"div"},(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#0550AE"}},(0,r.kt)("data-lsp",{parentName:"span",lsp:"const a: 1"},"a")),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#0550AE"}},"1"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},";")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},(0,r.kt)("data-err",{parentName:"span"},(0,r.kt)("data-lsp",{parentName:"data-err",lsp:"const a: any"},"a"))," "),(0,r.kt)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#0550AE"}},"2"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"; "),(0,r.kt)("span",{parentName:"div",style:{color:"#6E7781"}},"// -> TypeError: Assignment to constant variable.")),(0,r.kt)("span",{parentName:"code",className:"error"},(0,r.kt)("span",{parentName:"span"},"Cannot assign to 'a' because it is a constant."),(0,r.kt)("span",{parentName:"span",className:"code"},"2588")),(0,r.kt)("span",{parentName:"code",className:"error-behind"},"Cannot assign to 'a' because it is a constant.")))),(0,r.kt)("pre",{parentName:"div",className:"shiki github-dark twoslash lsp",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,r.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.kt)("div",{parentName:"pre",className:"code-container"},(0,r.kt)("code",{parentName:"div"},(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#79C0FF"}},(0,r.kt)("data-lsp",{parentName:"span",lsp:"const a: 1"},"a")),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#79C0FF"}},"1"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},(0,r.kt)("data-err",{parentName:"span"},(0,r.kt)("data-lsp",{parentName:"data-err",lsp:"const a: any"},"a"))," "),(0,r.kt)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#79C0FF"}},"2"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"; "),(0,r.kt)("span",{parentName:"div",style:{color:"#8B949E"}},"// -> TypeError: Assignment to constant variable.")),(0,r.kt)("span",{parentName:"code",className:"error"},(0,r.kt)("span",{parentName:"span"},"Cannot assign to 'a' because it is a constant."),(0,r.kt)("span",{parentName:"span",className:"code"},"2588")),(0,r.kt)("span",{parentName:"code",className:"error-behind"},"Cannot assign to 'a' because it is a constant."))))),(0,r.kt)("h3",{id:"no-implicit-globals"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-implicit-globals"},(0,r.kt)("inlineCode",{parentName:"a"},"no-implicit-globals"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error"),(0,r.kt)("li",{parentName:"ul"},"Configuration:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Disallow global lexical declarations too (",(0,r.kt)("inlineCode",{parentName:"li"},"lexicalBindings: true"),")")))),(0,r.kt)("p",null,"We have forbidden using ",(0,r.kt)("inlineCode",{parentName:"p"},"var"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," at the top level also behave weirdly due to TDZ. You should probably be modularizing your code anyway."),(0,r.kt)("h3",{id:"no-var"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-var"},(0,r.kt)("inlineCode",{parentName:"a"},"no-var"))),(0,r.kt)("p",null,"We disallow ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," statements. ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," is fully predated by ",(0,r.kt)("inlineCode",{parentName:"p"},"let"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"const")," and its hoisting behavior makes code harder to debug. There's not a single reason to use ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," today. If you need to share one variable between two blocks, declare it in the upper scope. If you need to declare a global variable (which you probably shouldn't anyway), directly modify ",(0,r.kt)("inlineCode",{parentName:"p"},"globalThis")," (which also works in modules)."),(0,r.kt)("div",{className:"shiki-twoslash-fragment"},(0,r.kt)("pre",{parentName:"div",className:"shiki github-light twoslash lsp",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,r.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.kt)("div",{parentName:"pre",className:"code-container"},(0,r.kt)("code",{parentName:"div"},(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#CF222E"}},"declare"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#CF222E"}},"var"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," ",(0,r.kt)("data-lsp",{parentName:"span",lsp:"var globalVar: number"},"globalVar")),(0,r.kt)("span",{parentName:"div",style:{color:"#CF222E"}},":"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#0550AE"}},"number"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},";")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},(0,r.kt)("data-lsp",{parentName:"span",lsp:"module globalThis"},"globalThis"),".",(0,r.kt)("data-lsp",{parentName:"span",lsp:"var globalVar: number"},"globalVar")," "),(0,r.kt)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#0550AE"}},"1"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},";"))))),(0,r.kt)("pre",{parentName:"div",className:"shiki github-dark twoslash lsp",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,r.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.kt)("div",{parentName:"pre",className:"code-container"},(0,r.kt)("code",{parentName:"div"},(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#FF7B72"}},"declare"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#FF7B72"}},"var"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," ",(0,r.kt)("data-lsp",{parentName:"span",lsp:"var globalVar: number"},"globalVar")),(0,r.kt)("span",{parentName:"div",style:{color:"#FF7B72"}},":"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#79C0FF"}},"number"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},(0,r.kt)("data-lsp",{parentName:"span",lsp:"module globalThis"},"globalThis"),".",(0,r.kt)("data-lsp",{parentName:"span",lsp:"var globalVar: number"},"globalVar")," "),(0,r.kt)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#79C0FF"}},"1"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")))))),(0,r.kt)("h3",{id:"no-undef-init"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-undef-init"},(0,r.kt)("inlineCode",{parentName:"a"},"no-undef-init"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: off")),(0,r.kt)("p",null,"We ",(0,r.kt)("em",{parentName:"p"},"require")," variables to be initialized (through ",(0,r.kt)("inlineCode",{parentName:"p"},"init-declarations"),"). In case there's no reasonable default value, you should use explicit ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.kt)("h3",{id:"no-useless-rename"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-useless-rename"},(0,r.kt)("inlineCode",{parentName:"a"},"no-useless-rename"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error")),(0,r.kt)("p",null,"Don't rename a variable to the same name in import, export, and destructuring."),(0,r.kt)("h3",{id:"one-var"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/one-var"},(0,r.kt)("inlineCode",{parentName:"a"},"one-var"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: off")),(0,r.kt)("p",null,"Generally, you should put each variable declaration on its own line. However, when it makes sense (for example, multiple variables used for very similar purposes: ",(0,r.kt)("inlineCode",{parentName:"p"},"let start = 0, end = 0;"),"), you are free to declare multiple variables consecutively."),(0,r.kt)("h3",{id:"prefer-const"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/prefer-const"},(0,r.kt)("inlineCode",{parentName:"a"},"prefer-const"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error"),(0,r.kt)("li",{parentName:"ul"},"Configuration:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Require ",(0,r.kt)("inlineCode",{parentName:"li"},"const")," as long as any of the destructured variables should be ",(0,r.kt)("inlineCode",{parentName:"li"},"const")," (",(0,r.kt)("inlineCode",{parentName:"li"},'destructuring: "any"'),")"),(0,r.kt)("li",{parentName:"ul"},"Do not ignore variables that are only assigned once and read before assignment (",(0,r.kt)("inlineCode",{parentName:"li"},"ignoreReadBeforeAssign: false"),")")))),(0,r.kt)("p",null,"Only use ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," when the variable is actually reassigned. Otherwise, use ",(0,r.kt)("inlineCode",{parentName:"p"},"const"),", which makes TypeScript infer narrower types, and makes the type of each variable easier to trace."),(0,r.kt)("p",null,"In destructuring, we require using ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," when any of the variables should be ",(0,r.kt)("inlineCode",{parentName:"p"},"const"),". Otherwise, this may lead to spillover writability. If you want to make some of the variables ",(0,r.kt)("inlineCode",{parentName:"p"},"let"),", you should destructure them separately."),(0,r.kt)("div",{className:"shiki-twoslash-fragment"},(0,r.kt)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,r.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.kt)("div",{parentName:"pre",className:"code-container"},(0,r.kt)("code",{parentName:"div"},(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#0550AE"}},"result"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#8250DF"}},"doSomething"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"();")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," { "),(0,r.kt)("span",{parentName:"div",style:{color:"#0550AE"}},"a"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},", "),(0,r.kt)("span",{parentName:"div",style:{color:"#0550AE"}},"b"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," } "),(0,r.kt)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," result;")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#CF222E"}},"let"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," { c, d } "),(0,r.kt)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," result;"))))),(0,r.kt)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,r.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.kt)("div",{parentName:"pre",className:"code-container"},(0,r.kt)("code",{parentName:"div"},(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#79C0FF"}},"result"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#D2A8FF"}},"doSomething"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"();")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," { "),(0,r.kt)("span",{parentName:"div",style:{color:"#79C0FF"}},"a"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},", "),(0,r.kt)("span",{parentName:"div",style:{color:"#79C0FF"}},"b"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," } "),(0,r.kt)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," result;")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#FF7B72"}},"let"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," { c, d } "),(0,r.kt)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," result;")))))),(0,r.kt)("h3",{id:"prefer-destructuring"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/prefer-destructuring"},(0,r.kt)("inlineCode",{parentName:"a"},"prefer-destructuring"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error"),(0,r.kt)("li",{parentName:"ul"},"Configuration:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Require destructuring for arrays (",(0,r.kt)("inlineCode",{parentName:"li"},"array: true"),")"),(0,r.kt)("li",{parentName:"ul"},"Require destructuring for objects (",(0,r.kt)("inlineCode",{parentName:"li"},"object: true"),")"),(0,r.kt)("li",{parentName:"ul"},"Do not require destructuring when the variable is renamed (",(0,r.kt)("inlineCode",{parentName:"li"},"enforceForRenamedProperties: false"),")")))),(0,r.kt)("p",null,"Destructuring is generally preferred over accessing properties directly. It makes the code more concise and easier to read. There are some catches:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"When you are accessing a high array index (for example, ",(0,r.kt)("inlineCode",{parentName:"li"},"const char = str[5]"),"), you may not want to use destructuring like ",(0,r.kt)("inlineCode",{parentName:"li"},"const [, , , , , char] = str"),". Disable the rule in this case."),(0,r.kt)("li",{parentName:"ol"},"In performance-critical cases, array destructuring is slower than property access. ",(0,r.kt)("inlineCode",{parentName:"li"},"const { 0: x } = a")," may be faster than ",(0,r.kt)("inlineCode",{parentName:"li"},"const [x] = a"),". This does not matter in general."),(0,r.kt)("li",{parentName:"ol"},"Not all index accesses can be safely refactored to array destructuring, unless the object is also iterable. You should use your own discretion when fixing the error.")),(0,r.kt)("h3",{id:"vars-on-top"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/vars-on-top"},(0,r.kt)("inlineCode",{parentName:"a"},"vars-on-top"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error")),(0,r.kt)("p",null,"We don't usually allow ",(0,r.kt)("inlineCode",{parentName:"p"},"var"),"s. When you do use them, put them at the top level of functions/scripts to minimize its quirks."),(0,r.kt)("h2",{id:"naming-conventions"},"Naming conventions"),(0,r.kt)("h3",{id:"camelcase"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/camelcase"},(0,r.kt)("inlineCode",{parentName:"a"},"camelcase"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error"),(0,r.kt)("li",{parentName:"ul"},"Configuration:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Require destructured variables to be camelCase (",(0,r.kt)("inlineCode",{parentName:"li"},"ignoreDestructuring: false"),")"),(0,r.kt)("li",{parentName:"ul"},"Require global variables to be camelCase (",(0,r.kt)("inlineCode",{parentName:"li"},"ignoreGlobals: false"),")"),(0,r.kt)("li",{parentName:"ul"},"Require imported variables to be camelCase (",(0,r.kt)("inlineCode",{parentName:"li"},"ignoreImports: false"),")"),(0,r.kt)("li",{parentName:"ul"},"Ignore property names in object literals (",(0,r.kt)("inlineCode",{parentName:"li"},'properties: "never"'),")")))),(0,r.kt)("p",null,"Until we fully use ",(0,r.kt)("inlineCode",{parentName:"p"},"@typescript-eslint/naming-convention"),", we will still use this rule to enforce camelCase where possible. We don't check object properties because the object may be passed to a third-party library:"),(0,r.kt)("div",{className:"shiki-twoslash-fragment"},(0,r.kt)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,r.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.kt)("div",{parentName:"pre",className:"code-container"},(0,r.kt)("code",{parentName:"div"},(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#8250DF"}},"checkESLint"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"({")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"  config: {")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"    camel_case: "),(0,r.kt)("span",{parentName:"div",style:{color:"#0550AE"}},"true"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},",")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"  },")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"});"))))),(0,r.kt)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,r.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.kt)("div",{parentName:"pre",className:"code-container"},(0,r.kt)("code",{parentName:"div"},(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#D2A8FF"}},"checkESLint"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"({")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  config: {")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"    camel_case: "),(0,r.kt)("span",{parentName:"div",style:{color:"#79C0FF"}},"true"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},",")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  },")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"});")))))),(0,r.kt)("h3",{id:"id-denylist"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/id-denylist"},(0,r.kt)("inlineCode",{parentName:"a"},"id-denylist"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: off")),(0,r.kt)("p",null,"You may want to configure this yourself if you want to ban certain identifiers."),(0,r.kt)("h3",{id:"id-length"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/id-length"},(0,r.kt)("inlineCode",{parentName:"a"},"id-length"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: off")),(0,r.kt)("p",null,"We don't think length is a good metric for name quality."),(0,r.kt)("h3",{id:"id-match"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/id-match"},(0,r.kt)("inlineCode",{parentName:"a"},"id-match"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: off")),(0,r.kt)("p",null,"This rule is fully covered by ",(0,r.kt)("inlineCode",{parentName:"p"},"@typescript-eslint/naming-convention"),"."),(0,r.kt)("h3",{id:"no-shadow-restricted-names"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-shadow-restricted-names"},(0,r.kt)("inlineCode",{parentName:"a"},"no-shadow-restricted-names"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error")),(0,r.kt)("p",null,"Don't declare a binding called ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"NaN"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Infinity"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"eval"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"arguments"),". You know exactly what values they represent."),(0,r.kt)("h3",{id:"no-underscore-dangle"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-underscore-dangle"},(0,r.kt)("inlineCode",{parentName:"a"},"no-underscore-dangle"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: off")),(0,r.kt)("p",null,"You should generally avoid underscored names and prefer proper encapsulation instead (such as through closures and private names). Do ",(0,r.kt)("em",{parentName:"p"},"not")," use underscores to represent throwaway names; just leave it unused (such cases include object destructuring to throw the property away, or function parameters). However, there are cases where you have to use underscores, such as when the name is expected by an external API."),(0,r.kt)("h2",{id:"globals"},"Globals"),(0,r.kt)("h3",{id:"no-alert"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-alert"},(0,r.kt)("inlineCode",{parentName:"a"},"no-alert"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error")),(0,r.kt)("p",null,"There is no good reason to use ",(0,r.kt)("inlineCode",{parentName:"p"},"alert"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"confirm"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"prompt")," in production. They are blocking and look too much like system dialogs."),(0,r.kt)("h3",{id:"no-console"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-console"},(0,r.kt)("inlineCode",{parentName:"a"},"no-console"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: can be enabled")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"console.log")," is commonly left as debugging artifacts and can occasionally disrupt the console log formatting. For example, Webpack has the unified ",(0,r.kt)("a",{parentName:"p",href:"https://webpack.js.org/api/logging/"},"logger interface")," for emitting messages. Projects are encouraged to encapsulate their own logger instance as well for unified message formatting and semantics."),(0,r.kt)("p",null,"However, in more casual projects without a wrapped logger, using ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log")," may be intentional. This rule can be overridden in user-land."),(0,r.kt)("h3",{id:"no-eval"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-eval"},(0,r.kt)("inlineCode",{parentName:"a"},"no-eval"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error"),(0,r.kt)("li",{parentName:"ul"},"Configuration:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Do not allow indirect ",(0,r.kt)("inlineCode",{parentName:"li"},"eval")," (",(0,r.kt)("inlineCode",{parentName:"li"},"allowIndirect: false"),")")))),(0,r.kt)("p",null,"There is not much reason you should use ",(0,r.kt)("inlineCode",{parentName:"p"},"eval"),"\u2014many safe alternatives exist. Indirect ",(0,r.kt)("inlineCode",{parentName:"p"},"eval")," in strict mode tends to be safe but is still frowned upon. In case you really need to dynamically evaluate code, use ",(0,r.kt)("inlineCode",{parentName:"p"},"new Function")," instead, which also allows injecting variables via parameters."),(0,r.kt)("h3",{id:"no-global-assign"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-global-assign"},(0,r.kt)("inlineCode",{parentName:"a"},"no-global-assign"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: off")),(0,r.kt)("p",null,"We have to turn this rule off, because we cannot make ESLint aware of every global, so the reports are too inconsistent and unhelpful. However, you should know from your heart to only reassign variables in your scope. If you want to modify globals, use ",(0,r.kt)("inlineCode",{parentName:"p"},"globalThis.x")," instead to make your intention explicit."),(0,r.kt)("h3",{id:"no-implied-eval"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-implied-eval"},(0,r.kt)("inlineCode",{parentName:"a"},"no-implied-eval"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error")),(0,r.kt)("p",null,"There is no good reason to use ",(0,r.kt)("inlineCode",{parentName:"p"},"setTimeout"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"setInterval")," with a string argument. Use a function instead."),(0,r.kt)("h3",{id:"no-iterator"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-iterator"},(0,r.kt)("inlineCode",{parentName:"a"},"no-iterator"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error")),(0,r.kt)("p",null,"Don't use the ",(0,r.kt)("inlineCode",{parentName:"p"},"__iterator__")," property. No one implements it."),(0,r.kt)("h3",{id:"no-new-func"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-new-func"},(0,r.kt)("inlineCode",{parentName:"a"},"no-new-func"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error")),(0,r.kt)("p",null,"You should generally avoid using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Function")," constructor, because it is just another form of dynamic evaluation. However, compared to ",(0,r.kt)("inlineCode",{parentName:"p"},"eval"),", it is easier to be used safely, and in case when you need to dynamically evaluate code, you should prefer to use this instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"eval"),"."),(0,r.kt)("h3",{id:"no-new-native-nonconstructor"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-new-native-nonconstructor"},(0,r.kt)("inlineCode",{parentName:"a"},"no-new-native-nonconstructor"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error"),(0,r.kt)("li",{parentName:"ul"},"Related:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ts(7009): 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type."))))),(0,r.kt)("p",null,"Don't construct ",(0,r.kt)("inlineCode",{parentName:"p"},"Symbol")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"BigInt")," because they are not meant for construction."),(0,r.kt)("h3",{id:"no-new-wrappers"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-new-wrappers"},(0,r.kt)("inlineCode",{parentName:"a"},"no-new-wrappers"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error")),(0,r.kt)("p",null,"Don't construct ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Number"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"Boolean")," objects because they are much harder to use and do not have any benefits over primitives."),(0,r.kt)("h3",{id:"no-obj-calls"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-obj-calls"},(0,r.kt)("inlineCode",{parentName:"a"},"no-obj-calls"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error"),(0,r.kt)("li",{parentName:"ul"},"Related:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ts(2349): This expression is not callable. Type 'Math' has no call signatures."))))),(0,r.kt)("p",null,"Don't call ",(0,r.kt)("inlineCode",{parentName:"p"},"Math"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON"),", and other namespaces."),(0,r.kt)("h3",{id:"no-object-constructor"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-object-constructor"},(0,r.kt)("inlineCode",{parentName:"a"},"no-object-constructor"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error")),(0,r.kt)("p",null,"Don't use ",(0,r.kt)("inlineCode",{parentName:"p"},"new Object()")," because it's just a longer way of writing ",(0,r.kt)("inlineCode",{parentName:"p"},"{}"),". Always use ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")," with an argument."),(0,r.kt)("h3",{id:"no-proto"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-proto"},(0,r.kt)("inlineCode",{parentName:"a"},"no-proto"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error")),(0,r.kt)("p",null,"Don't access the ",(0,r.kt)("inlineCode",{parentName:"p"},"__proto__")," property. Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Object.getPrototypeOf")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Object.setPrototypeOf")," instead. Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"__proto__")," syntax in object literals is still allowed and should be preferred over ",(0,r.kt)("inlineCode",{parentName:"p"},"Object.create"),"."),(0,r.kt)("div",{className:"shiki-twoslash-fragment"},(0,r.kt)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,r.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.kt)("div",{parentName:"pre",className:"code-container"},(0,r.kt)("code",{parentName:"div"},(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#6E7781"}},"// Write this:")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#0550AE"}},"obj"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," {")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"  __proto__: "),(0,r.kt)("span",{parentName:"div",style:{color:"#0550AE"}},"null"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},",")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"};")),(0,r.kt)("div",{parentName:"code",className:"line"}),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#6E7781"}},"// Instead of this:")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#0550AE"}},"obj"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#0550AE"}},"Object"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"."),(0,r.kt)("span",{parentName:"div",style:{color:"#8250DF"}},"create"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"("),(0,r.kt)("span",{parentName:"div",style:{color:"#0550AE"}},"null"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},");"))))),(0,r.kt)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,r.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.kt)("div",{parentName:"pre",className:"code-container"},(0,r.kt)("code",{parentName:"div"},(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#8B949E"}},"// Write this:")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#79C0FF"}},"obj"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," {")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  __proto__: "),(0,r.kt)("span",{parentName:"div",style:{color:"#79C0FF"}},"null"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},",")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"};")),(0,r.kt)("div",{parentName:"code",className:"line"}),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#8B949E"}},"// Instead of this:")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#79C0FF"}},"obj"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.kt)("span",{parentName:"div",style:{color:"#79C0FF"}},"Object"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"."),(0,r.kt)("span",{parentName:"div",style:{color:"#D2A8FF"}},"create"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"("),(0,r.kt)("span",{parentName:"div",style:{color:"#79C0FF"}},"null"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},");")))))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"TypeScript does not support the ",(0,r.kt)("inlineCode",{parentName:"p"},"__proto__")," syntax in object literals yet. However, ",(0,r.kt)("inlineCode",{parentName:"p"},"Object.create")," will be always typed as ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),", so the former should still be preferred. Cast with ",(0,r.kt)("inlineCode",{parentName:"p"},"null as never")," when necessary.")),(0,r.kt)("h3",{id:"no-prototype-builtins"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-prototype-builtins"},(0,r.kt)("inlineCode",{parentName:"a"},"no-prototype-builtins"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error")),(0,r.kt)("p",null,"Don't use ",(0,r.kt)("inlineCode",{parentName:"p"},"Object.prototype")," methods because they are not safe against ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),". Generally, you don't need to jump hoops to get similar behavior."),(0,r.kt)("div",{className:"shiki-twoslash-fragment"},(0,r.kt)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,r.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.kt)("div",{parentName:"pre",className:"code-container"},(0,r.kt)("code",{parentName:"div"},(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#6E7781"}},"// Instead of:")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"foo."),(0,r.kt)("span",{parentName:"div",style:{color:"#8250DF"}},"hasOwnProperty"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"("),(0,r.kt)("span",{parentName:"div",style:{color:"#0A3069"}},'"bar"'),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},");")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"foo."),(0,r.kt)("span",{parentName:"div",style:{color:"#8250DF"}},"propertyIsEnumerable"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"("),(0,r.kt)("span",{parentName:"div",style:{color:"#0A3069"}},'"bar"'),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},");")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"foo."),(0,r.kt)("span",{parentName:"div",style:{color:"#8250DF"}},"isPrototypeOf"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"(bar);")),(0,r.kt)("div",{parentName:"code",className:"line"}),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#6E7781"}},"// Write:")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#0550AE"}},"Object"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"."),(0,r.kt)("span",{parentName:"div",style:{color:"#8250DF"}},"hasOwn"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"(foo, "),(0,r.kt)("span",{parentName:"div",style:{color:"#0A3069"}},'"bar"'),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},");")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#0550AE"}},"Object"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"."),(0,r.kt)("span",{parentName:"div",style:{color:"#8250DF"}},"getOwnPropertyDescriptor"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"(foo, "),(0,r.kt)("span",{parentName:"div",style:{color:"#0A3069"}},'"bar"'),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},")?.enumerable;")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#0550AE"}},"Object"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"."),(0,r.kt)("span",{parentName:"div",style:{color:"#0550AE"}},"prototype"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},".isPrototypeOf."),(0,r.kt)("span",{parentName:"div",style:{color:"#8250DF"}},"call"),(0,r.kt)("span",{parentName:"div",style:{color:"#24292F"}},"(foo, bar); "),(0,r.kt)("span",{parentName:"div",style:{color:"#6E7781"}},"// Do you really need this?"))))),(0,r.kt)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,r.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.kt)("div",{parentName:"pre",className:"code-container"},(0,r.kt)("code",{parentName:"div"},(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#8B949E"}},"// Instead of:")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"foo."),(0,r.kt)("span",{parentName:"div",style:{color:"#D2A8FF"}},"hasOwnProperty"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"("),(0,r.kt)("span",{parentName:"div",style:{color:"#A5D6FF"}},'"bar"'),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},");")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"foo."),(0,r.kt)("span",{parentName:"div",style:{color:"#D2A8FF"}},"propertyIsEnumerable"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"("),(0,r.kt)("span",{parentName:"div",style:{color:"#A5D6FF"}},'"bar"'),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},");")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"foo."),(0,r.kt)("span",{parentName:"div",style:{color:"#D2A8FF"}},"isPrototypeOf"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"(bar);")),(0,r.kt)("div",{parentName:"code",className:"line"}),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#8B949E"}},"// Write:")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#79C0FF"}},"Object"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"."),(0,r.kt)("span",{parentName:"div",style:{color:"#D2A8FF"}},"hasOwn"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"(foo, "),(0,r.kt)("span",{parentName:"div",style:{color:"#A5D6FF"}},'"bar"'),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},");")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#79C0FF"}},"Object"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"."),(0,r.kt)("span",{parentName:"div",style:{color:"#D2A8FF"}},"getOwnPropertyDescriptor"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"(foo, "),(0,r.kt)("span",{parentName:"div",style:{color:"#A5D6FF"}},'"bar"'),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},")?.enumerable;")),(0,r.kt)("div",{parentName:"code",className:"line"},(0,r.kt)("span",{parentName:"div",style:{color:"#79C0FF"}},"Object"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"."),(0,r.kt)("span",{parentName:"div",style:{color:"#79C0FF"}},"prototype"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},".isPrototypeOf."),(0,r.kt)("span",{parentName:"div",style:{color:"#D2A8FF"}},"call"),(0,r.kt)("span",{parentName:"div",style:{color:"#C9D1D9"}},"(foo, bar); "),(0,r.kt)("span",{parentName:"div",style:{color:"#8B949E"}},"// Do you really need this?")))))),(0,r.kt)("h3",{id:"no-restricted-properties"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-restricted-properties"},(0,r.kt)("inlineCode",{parentName:"a"},"no-restricted-properties"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: off")),(0,r.kt)("p",null,"You may want to configure this yourself if you want to ban certain identifiers or certain properties."),(0,r.kt)("h3",{id:"no-undef"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-undef"},(0,r.kt)("inlineCode",{parentName:"a"},"no-undef"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error"),(0,r.kt)("li",{parentName:"ul"},"Configuration:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Disallow using ",(0,r.kt)("inlineCode",{parentName:"li"},"typeof")," on undefined variables (",(0,r.kt)("inlineCode",{parentName:"li"},"typeof: true"),")"))),(0,r.kt)("li",{parentName:"ul"},"Related:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ts(2304): Cannot find name 'a'."))))),(0,r.kt)("p",null,"Don't use undefined variables. If you want to check if a variable is defined, use ",(0,r.kt)("inlineCode",{parentName:"p"},'if ("x" in globalThis)')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'if (typeof globalThis.x !== "undefined")'),"."),(0,r.kt)("p",null,"Note that this rule is only useful in a plain-JS project. In a TypeScript project, you should use TypeScript checks instead. You may find cases where ESLint is unaware of a global variable. In this case, either change your ",(0,r.kt)("inlineCode",{parentName:"p"},"env")," setting, or use ",(0,r.kt)("inlineCode",{parentName:"p"},"globalThis.x"),"."),(0,r.kt)("h3",{id:"no-undefined"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-undefined"},(0,r.kt)("inlineCode",{parentName:"a"},"no-undefined"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: off")),(0,r.kt)("p",null,"There's virtually no risk to use ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," nowadays, especially with rules like ",(0,r.kt)("inlineCode",{parentName:"p"},"no-shadow-restricted-names"),". Furthermore, because ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),' is so pervasive as the implicit "value of absence", it\'s hard to avoid it. You should generally use ',(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," as the default value, unless the latter has a semantic difference from ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.kt)("h3",{id:"prefer-object-has-own"},(0,r.kt)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/prefer-object-has-own"},(0,r.kt)("inlineCode",{parentName:"a"},"prefer-object-has-own"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Severity: error")),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Object.hasOwn")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"Object.prototype.hasOwnProperty.call"),". It's shorter and more readable. If you need compatibility, install a polyfill. (You should never use ",(0,r.kt)("inlineCode",{parentName:"p"},"x.hasOwnProperty"),", by the way; see ",(0,r.kt)("a",{parentName:"p",href:"#no-prototype-builtins"},(0,r.kt)("inlineCode",{parentName:"a"},"no-prototype-builtins")),".)"))}m.isMDXComponent=!0},5318:(e,a,t)=>{t.d(a,{Zo:()=>d,kt:()=>N});var n=t(7378);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=n.createContext({}),p=function(e){var a=n.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},d=function(e){var a=p(e.components);return n.createElement(i.Provider,{value:a},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},k=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(t),k=r,N=c["".concat(i,".").concat(k)]||c[k]||m[k]||l;return t?n.createElement(N,o(o({ref:a},d),{},{components:t})):n.createElement(N,o({ref:a},d))}));function N(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=k;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<l;p++)o[p]=t[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}k.displayName="MDXCreateElement"}}]);