"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"defaultSidebar":[{"type":"link","label":"Guide","href":"/js-style-guide/","docId":"guide"},{"type":"category","label":"Base rules","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"General formatting","href":"/js-style-guide/eslint-base/formatting","docId":"eslint-base/formatting"},{"type":"link","label":"Literals","href":"/js-style-guide/eslint-base/literals","docId":"eslint-base/literals"},{"type":"link","label":"Variables & names","href":"/js-style-guide/eslint-base/variables-names","docId":"eslint-base/variables-names"},{"type":"link","label":"Operators","href":"/js-style-guide/eslint-base/operators","docId":"eslint-base/operators"},{"type":"link","label":"Control flow","href":"/js-style-guide/eslint-base/control-flow","docId":"eslint-base/control-flow"},{"type":"link","label":"Functions","href":"/js-style-guide/eslint-base/functions","docId":"eslint-base/functions"},{"type":"link","label":"Objects & classes","href":"/js-style-guide/eslint-base/objects-classes","docId":"eslint-base/objects-classes"},{"type":"link","label":"Collections","href":"/js-style-guide/eslint-base/collections","docId":"eslint-base/collections"},{"type":"link","label":"Async operations","href":"/js-style-guide/eslint-base/async","docId":"eslint-base/async"},{"type":"link","label":"Modules","href":"/js-style-guide/eslint-base/modules","docId":"eslint-base/modules"}],"href":"/js-style-guide/eslint-base/"},{"type":"link","label":"TypeScript","href":"/js-style-guide/typescript","docId":"typescript"}]},"docs":{"eslint-base/async":{"id":"eslint-base/async","title":"Async operations","description":"Promises","sidebar":"defaultSidebar"},"eslint-base/collections":{"id":"eslint-base/collections","title":"Collections","description":"Arrays","sidebar":"defaultSidebar"},"eslint-base/control-flow":{"id":"eslint-base/control-flow","title":"Control flow","description":"Blocks","sidebar":"defaultSidebar"},"eslint-base/formatting":{"id":"eslint-base/formatting","title":"General formatting","description":"Code formatting is completely Prettier-powered. Some Prettier configuration options that can be contended are explained below. We only use ESLint to enforce some formatting rules that Prettier cannot handle, mostly around curly braces and comments.","sidebar":"defaultSidebar"},"eslint-base/functions":{"id":"eslint-base/functions","title":"Functions","description":"When to create functions","sidebar":"defaultSidebar"},"eslint-base/index":{"id":"eslint-base/index","title":"Base rules","description":"This page introduces some general rules for JavaScript programming. Most of these are enforced by ESLint core rules.","sidebar":"defaultSidebar"},"eslint-base/literals":{"id":"eslint-base/literals","title":"Literals","description":"Number literals","sidebar":"defaultSidebar"},"eslint-base/modules":{"id":"eslint-base/modules","title":"Modules","description":"Module names","sidebar":"defaultSidebar"},"eslint-base/objects-classes":{"id":"eslint-base/objects-classes","title":"Objects & classes","description":"General","sidebar":"defaultSidebar"},"eslint-base/operators":{"id":"eslint-base/operators","title":"Operators","description":"Arithmetics","sidebar":"defaultSidebar"},"eslint-base/variables-names":{"id":"eslint-base/variables-names","title":"Variables & names","description":"This page discusses rules around variable declaration, use of properties, and naming.","sidebar":"defaultSidebar"},"guide":{"id":"guide","title":"Guide","description":"This page gets you started with JC-verse\'s JS style guide. The JS style guide is enforced through a set of toolings:","sidebar":"defaultSidebar"},"typescript":{"id":"typescript","title":"TypeScript","description":"no-non-null-assertion","sidebar":"defaultSidebar"}}}')}}]);