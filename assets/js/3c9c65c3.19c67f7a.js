"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[480],{9916:(e,a,n)=>{n.d(a,{xA:()=>y,yg:()=>m});var l=n(3696);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);a&&(l=l.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,l,t=function(e,a){if(null==e)return{};var n,l,t={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var i=l.createContext({}),p=function(e){var a=l.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},y=function(e){var a=p(e.components);return l.createElement(i.Provider,{value:a},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return l.createElement(l.Fragment,{},a)}},g=l.forwardRef((function(e,a){var n=e.components,t=e.mdxType,r=e.originalType,i=e.parentName,y=s(e,["components","mdxType","originalType","parentName"]),d=p(n),g=t,m=d["".concat(i,".").concat(g)]||d[g]||c[g]||r;return n?l.createElement(m,o(o({ref:a},y),{},{components:n})):l.createElement(m,o({ref:a},y))}));function m(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var r=n.length,o=new Array(r);o[0]=g;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s[d]="string"==typeof e?e:t,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3284:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var l=n(8102),t=(n(3696),n(9916));const r={sidebar_position:3},o="Variables & names",s={unversionedId:"eslint-base/variables-names",id:"eslint-base/variables-names",title:"Variables & names",description:"This page discusses rules around variable declaration, use of properties, and naming.",source:"@site/../docs/eslint-base/variables-names.md",sourceDirName:"eslint-base",slug:"/eslint-base/variables-names",permalink:"/js-style-guide/eslint-base/variables-names",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Literals",permalink:"/js-style-guide/eslint-base/literals"},next:{title:"Operators",permalink:"/js-style-guide/eslint-base/operators"}},i={},p=[{value:"Variable declarations",id:"variable-declarations",level:2},{value:"<code>block-scoped-var</code>",id:"block-scoped-var",level:3},{value:"<code>init-declarations</code>",id:"init-declarations",level:3},{value:"<code>no-const-assign</code>",id:"no-const-assign",level:3},{value:"<code>no-implicit-globals</code>",id:"no-implicit-globals",level:3},{value:"<code>no-redeclare</code>",id:"no-redeclare",level:3},{value:"<code>no-shadow</code>",id:"no-shadow",level:3},{value:"<code>no-var</code>",id:"no-var",level:3},{value:"<code>no-undef-init</code>",id:"no-undef-init",level:3},{value:"<code>no-unused-vars</code>",id:"no-unused-vars",level:3},{value:"<code>no-use-before-define</code>",id:"no-use-before-define",level:3},{value:"<code>no-useless-rename</code>",id:"no-useless-rename",level:3},{value:"<code>one-var</code>",id:"one-var",level:3},{value:"<code>prefer-const</code>",id:"prefer-const",level:3},{value:"<code>prefer-destructuring</code>",id:"prefer-destructuring",level:3},{value:"<code>vars-on-top</code>",id:"vars-on-top",level:3},{value:"Naming conventions",id:"naming-conventions",level:2},{value:"<code>camelcase</code>",id:"camelcase",level:3},{value:"<code>id-denylist</code>",id:"id-denylist",level:3},{value:"<code>id-length</code>",id:"id-length",level:3},{value:"<code>id-match</code>",id:"id-match",level:3},{value:"<code>no-shadow-restricted-names</code>",id:"no-shadow-restricted-names",level:3},{value:"<code>no-underscore-dangle</code>",id:"no-underscore-dangle",level:3},{value:"Globals",id:"globals",level:2},{value:"<code>no-alert</code>",id:"no-alert",level:3},{value:"<code>no-console</code>",id:"no-console",level:3},{value:"<code>no-eval</code>",id:"no-eval",level:3},{value:"<code>no-global-assign</code>",id:"no-global-assign",level:3},{value:"<code>no-implied-eval</code>",id:"no-implied-eval",level:3},{value:"<code>no-iterator</code>",id:"no-iterator",level:3},{value:"<code>no-new-func</code>",id:"no-new-func",level:3},{value:"<code>no-new-native-nonconstructor</code>",id:"no-new-native-nonconstructor",level:3},{value:"<code>no-new-wrappers</code>",id:"no-new-wrappers",level:3},{value:"<code>no-obj-calls</code>",id:"no-obj-calls",level:3},{value:"<code>no-object-constructor</code>",id:"no-object-constructor",level:3},{value:"<code>no-proto</code>",id:"no-proto",level:3},{value:"<code>no-prototype-builtins</code>",id:"no-prototype-builtins",level:3},{value:"<code>no-restricted-properties</code>",id:"no-restricted-properties",level:3},{value:"<code>no-undef</code>",id:"no-undef",level:3},{value:"<code>no-undefined</code>",id:"no-undefined",level:3},{value:"<code>prefer-object-has-own</code>",id:"prefer-object-has-own",level:3}],y={toc:p},d="wrapper";function c(e){let{components:a,...n}=e;return(0,t.yg)(d,(0,l.A)({},y,n,{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"variables--names"},"Variables & names"),(0,t.yg)("p",null,"This page discusses rules around variable declaration, use of properties, and naming."),(0,t.yg)("h2",{id:"variable-declarations"},"Variable declarations"),(0,t.yg)("h3",{id:"block-scoped-var"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/block-scoped-var"},(0,t.yg)("inlineCode",{parentName:"a"},"block-scoped-var"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,"Because ",(0,t.yg)("inlineCode",{parentName:"p"},"var"),"s are forbidden altogether, this rule is mostly moot. In the rare case where you need to use ",(0,t.yg)("inlineCode",{parentName:"p"},"var")," (such as to declare globals), such vars should not be deceptively inside a block."),(0,t.yg)("h3",{id:"init-declarations"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/init-declarations"},(0,t.yg)("inlineCode",{parentName:"a"},"init-declarations"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error"),(0,t.yg)("li",{parentName:"ul"},"Disabled by the ",(0,t.yg)("a",{parentName:"li",href:"/js-style-guide/typescript/base"},"typescript")," config"),(0,t.yg)("li",{parentName:"ul"},"Configuration:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Require variables to be initialized (",(0,t.yg)("inlineCode",{parentName:"li"},'"always"'),")"))),(0,t.yg)("li",{parentName:"ul"},"Related:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/js-style-guide/typescript/base#init-declarations"},(0,t.yg)("inlineCode",{parentName:"a"},"@typescript-eslint/init-declarations"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"ts(2454): Variable 'a' is used before being assigned."))))),(0,t.yg)("p",null,"We require variables to be initialized. Otherwise, it's possible to circumvent TypeScript:"),(0,t.yg)("div",{className:"shiki-twoslash-fragment"},(0,t.yg)("pre",{parentName:"div",className:"shiki github-light twoslash lsp",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"let"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," ",(0,t.yg)("data-lsp",{parentName:"span",lsp:"let a: number"},"a")),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},":"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"number"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},";")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"function"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},(0,t.yg)("data-lsp",{parentName:"span",lsp:"function useA(): void"},"useA")),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"() {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  ",(0,t.yg)("data-lsp",{parentName:"span",lsp:"namespace console\nvar console: Console"},"console"),"."),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},(0,t.yg)("data-lsp",{parentName:"span",lsp:"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)"},"log")),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"(",(0,t.yg)("data-lsp",{parentName:"span",lsp:"let a: number"},"a"),"); "),(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// -> undefined")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"}")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},(0,t.yg)("data-lsp",{parentName:"span",lsp:"function useA(): void"},"useA")),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"();")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},(0,t.yg)("data-lsp",{parentName:"span",lsp:"let a: number"},"a")," "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"1"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},";"))))),(0,t.yg)("pre",{parentName:"div",className:"shiki github-dark twoslash lsp",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"let"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," ",(0,t.yg)("data-lsp",{parentName:"span",lsp:"let a: number"},"a")),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},":"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"number"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"function"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},(0,t.yg)("data-lsp",{parentName:"span",lsp:"function useA(): void"},"useA")),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"() {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  ",(0,t.yg)("data-lsp",{parentName:"span",lsp:"namespace console\nvar console: Console"},"console"),"."),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},(0,t.yg)("data-lsp",{parentName:"span",lsp:"(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)"},"log")),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"(",(0,t.yg)("data-lsp",{parentName:"span",lsp:"let a: number"},"a"),"); "),(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// -> undefined")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"}")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},(0,t.yg)("data-lsp",{parentName:"span",lsp:"function useA(): void"},"useA")),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"();")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},(0,t.yg)("data-lsp",{parentName:"span",lsp:"let a: number"},"a")," "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"1"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")))))),(0,t.yg)("p",null,"You should almost always initialize variables upfront (and use ",(0,t.yg)("inlineCode",{parentName:"p"},"const")," where possible). Use ternaries instead of ",(0,t.yg)("inlineCode",{parentName:"p"},"if...else"),". If you need to lazy initialize a variable, initialize it to ",(0,t.yg)("inlineCode",{parentName:"p"},"undefined"),", so that you remember to explicitly check for ",(0,t.yg)("inlineCode",{parentName:"p"},"undefined")," before using it."),(0,t.yg)("h3",{id:"no-const-assign"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-const-assign"},(0,t.yg)("inlineCode",{parentName:"a"},"no-const-assign"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error"),(0,t.yg)("li",{parentName:"ul"},"Related:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"ts(2588): Cannot assign to 'a' because it is a constant."))))),(0,t.yg)("p",null,"Re-assigning const variables causes a runtime error."),(0,t.yg)("div",{className:"shiki-twoslash-fragment"},(0,t.yg)("pre",{parentName:"div",className:"shiki github-light twoslash lsp",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},(0,t.yg)("data-lsp",{parentName:"span",lsp:"const a: 1"},"a")),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"1"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},";")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},(0,t.yg)("data-err",{parentName:"span"},(0,t.yg)("data-lsp",{parentName:"data-err",lsp:"const a: any"},"a"))," "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"2"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"; "),(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// -> TypeError: Assignment to constant variable.")),(0,t.yg)("span",{parentName:"code",className:"error"},(0,t.yg)("span",{parentName:"span"},"Cannot assign to 'a' because it is a constant."),(0,t.yg)("span",{parentName:"span",className:"code"},"2588")),(0,t.yg)("span",{parentName:"code",className:"error-behind"},"Cannot assign to 'a' because it is a constant.")))),(0,t.yg)("pre",{parentName:"div",className:"shiki github-dark twoslash lsp",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},(0,t.yg)("data-lsp",{parentName:"span",lsp:"const a: 1"},"a")),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"1"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},(0,t.yg)("data-err",{parentName:"span"},(0,t.yg)("data-lsp",{parentName:"data-err",lsp:"const a: any"},"a"))," "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"2"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"; "),(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// -> TypeError: Assignment to constant variable.")),(0,t.yg)("span",{parentName:"code",className:"error"},(0,t.yg)("span",{parentName:"span"},"Cannot assign to 'a' because it is a constant."),(0,t.yg)("span",{parentName:"span",className:"code"},"2588")),(0,t.yg)("span",{parentName:"code",className:"error-behind"},"Cannot assign to 'a' because it is a constant."))))),(0,t.yg)("h3",{id:"no-implicit-globals"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-implicit-globals"},(0,t.yg)("inlineCode",{parentName:"a"},"no-implicit-globals"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error"),(0,t.yg)("li",{parentName:"ul"},"Configuration:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Disallow global lexical declarations too (",(0,t.yg)("inlineCode",{parentName:"li"},"lexicalBindings: true"),")")))),(0,t.yg)("p",null,"We have forbidden using ",(0,t.yg)("inlineCode",{parentName:"p"},"var"),". ",(0,t.yg)("inlineCode",{parentName:"p"},"let")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"const")," at the top level also behave weirdly due to TDZ. You should probably be modularizing your code anyway."),(0,t.yg)("h3",{id:"no-redeclare"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-redeclare"},(0,t.yg)("inlineCode",{parentName:"a"},"no-redeclare"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error"),(0,t.yg)("li",{parentName:"ul"},"Configuration:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Check redeclaration of globals (",(0,t.yg)("inlineCode",{parentName:"li"},"builtinGlobals: false"),")"))),(0,t.yg)("li",{parentName:"ul"},"Related:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/js-style-guide/typescript/base#no-redeclare"},(0,t.yg)("inlineCode",{parentName:"a"},"@typescript-eslint/no-redeclare")))))),(0,t.yg)("p",null,"Do not redeclare ",(0,t.yg)("inlineCode",{parentName:"p"},"var"),"/",(0,t.yg)("inlineCode",{parentName:"p"},"function"),". This is probably a mistake. Note that ",(0,t.yg)("inlineCode",{parentName:"p"},"let"),"/",(0,t.yg)("inlineCode",{parentName:"p"},"const")," cannot be redeclared and doing so is a syntax error in the first place."),(0,t.yg)("h3",{id:"no-shadow"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-shadow"},(0,t.yg)("inlineCode",{parentName:"a"},"no-shadow"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: warning"),(0,t.yg)("li",{parentName:"ul"},"Configuration:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Ignore shadowing of globals (",(0,t.yg)("inlineCode",{parentName:"li"},"builtinGlobals: true"),")"),(0,t.yg)("li",{parentName:"ul"},"Check shadowing of all variables declared in the outer scope (",(0,t.yg)("inlineCode",{parentName:"li"},'hoist: "all"'),")"),(0,t.yg)("li",{parentName:"ul"},"Allow shadowing of uninitialized variables (",(0,t.yg)("inlineCode",{parentName:"li"},"ignoreOnInitialization: true"),")")))),(0,t.yg)("p",null,"We avoid shadowing because doing so is a refactoring hazard."),(0,t.yg)("div",{className:"shiki-twoslash-fragment"},(0,t.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"function"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"foo"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"("),(0,t.yg)("span",{parentName:"div",style:{color:"#953800"}},"x"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},") {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"doSomething"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"(("),(0,t.yg)("span",{parentName:"div",style:{color:"#953800"}},"x"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},") "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"=>"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"    console."),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"log"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"(x); "),(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// What is this x meant to be?")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"    "),(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// If I change the parameter name, should I change this too?")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  });")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"}"))))),(0,t.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"function"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"foo"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"("),(0,t.yg)("span",{parentName:"div",style:{color:"#FFA657"}},"x"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},") {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"doSomething"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"(("),(0,t.yg)("span",{parentName:"div",style:{color:"#FFA657"}},"x"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},") "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"=>"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"    console."),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"log"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"(x); "),(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// What is this x meant to be?")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"    "),(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// If I change the parameter name, should I change this too?")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  });")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"}")))))),(0,t.yg)("p",null,"The issue isn't better because the variable is only declared afterwards."),(0,t.yg)("div",{className:"shiki-twoslash-fragment"},(0,t.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"function"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"foo"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"() {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"doSomething"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"(("),(0,t.yg)("span",{parentName:"div",style:{color:"#953800"}},"x"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},") "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"=>"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"    console."),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"log"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"(x); "),(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// What is this x meant to be?")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"    "),(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// If I change the parameter name, should I change this too?")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  });")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// If I move this declaration before doSomething(), there")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// shouldn't be a difference")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"x"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"1"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},";")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"}"))))),(0,t.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"function"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"foo"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"() {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"doSomething"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"(("),(0,t.yg)("span",{parentName:"div",style:{color:"#FFA657"}},"x"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},") "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"=>"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"    console."),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"log"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"(x); "),(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// What is this x meant to be?")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"    "),(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// If I change the parameter name, should I change this too?")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  });")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// If I move this declaration before doSomething(), there")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// shouldn't be a difference")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"x"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"1"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"}")))))),(0,t.yg)("p",null,"However, shadowing is allowed when the variable is initialized later. The following pattern is encouraged:"),(0,t.yg)("div",{className:"shiki-twoslash-fragment"},(0,t.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"x"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," (() "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"=>"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"let"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," x "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"0"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},";")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// ...")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"return"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," x;")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"})();"))))),(0,t.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"x"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," (() "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"=>"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"let"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," x "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"0"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// ...")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"return"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," x;")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"})();")))))),(0,t.yg)("p",null,"We allow shadowing globals\u2014this is for a pragmatic concern. There are some extremely generically named globals like ",(0,t.yg)("inlineCode",{parentName:"p"},"name")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"Plugin")," which we don't want to prevented from being used as local variables. However, you should probably avoid using names like ",(0,t.yg)("inlineCode",{parentName:"p"},"fetch"),"."),(0,t.yg)("h3",{id:"no-var"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-var"},(0,t.yg)("inlineCode",{parentName:"a"},"no-var"))),(0,t.yg)("p",null,"We disallow ",(0,t.yg)("inlineCode",{parentName:"p"},"var")," statements. ",(0,t.yg)("inlineCode",{parentName:"p"},"var")," is fully predated by ",(0,t.yg)("inlineCode",{parentName:"p"},"let"),"/",(0,t.yg)("inlineCode",{parentName:"p"},"const")," and its hoisting behavior makes code harder to debug. There's not a single reason to use ",(0,t.yg)("inlineCode",{parentName:"p"},"var")," today. If you need to share one variable between two blocks, declare it in the upper scope. If you need to declare a global variable (which you probably shouldn't anyway), directly modify ",(0,t.yg)("inlineCode",{parentName:"p"},"globalThis")," (which also works in modules)."),(0,t.yg)("div",{className:"shiki-twoslash-fragment"},(0,t.yg)("pre",{parentName:"div",className:"shiki github-light twoslash lsp",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"declare"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"var"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," ",(0,t.yg)("data-lsp",{parentName:"span",lsp:"var globalVar: number"},"globalVar")),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},":"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"number"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},";")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},(0,t.yg)("data-lsp",{parentName:"span",lsp:"module globalThis"},"globalThis"),".",(0,t.yg)("data-lsp",{parentName:"span",lsp:"var globalVar: number"},"globalVar")," "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"1"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},";"))))),(0,t.yg)("pre",{parentName:"div",className:"shiki github-dark twoslash lsp",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"declare"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"var"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," ",(0,t.yg)("data-lsp",{parentName:"span",lsp:"var globalVar: number"},"globalVar")),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},":"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"number"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},(0,t.yg)("data-lsp",{parentName:"span",lsp:"module globalThis"},"globalThis"),".",(0,t.yg)("data-lsp",{parentName:"span",lsp:"var globalVar: number"},"globalVar")," "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"1"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")))))),(0,t.yg)("h3",{id:"no-undef-init"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-undef-init"},(0,t.yg)("inlineCode",{parentName:"a"},"no-undef-init"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: off")),(0,t.yg)("p",null,"We ",(0,t.yg)("em",{parentName:"p"},"require")," variables to be initialized (through ",(0,t.yg)("inlineCode",{parentName:"p"},"init-declarations"),"). In case there's no reasonable default value, you should use explicit ",(0,t.yg)("inlineCode",{parentName:"p"},"undefined"),"."),(0,t.yg)("h3",{id:"no-unused-vars"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-unused-vars"},(0,t.yg)("inlineCode",{parentName:"a"},"no-unused-vars"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error"),(0,t.yg)("li",{parentName:"ul"},"Configuration:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Check unused trailing function parameters (",(0,t.yg)("inlineCode",{parentName:"li"},'args: "after-used"'),")"),(0,t.yg)("li",{parentName:"ul"},"Check unused caught errors (",(0,t.yg)("inlineCode",{parentName:"li"},'caughtErrors: "all"'),")"),(0,t.yg)("li",{parentName:"ul"},"Ignore unused variables with rest element (",(0,t.yg)("inlineCode",{parentName:"li"},"ignoreRestSiblings: true"),")"),(0,t.yg)("li",{parentName:"ul"},"Check unused variables in the top-level scope (",(0,t.yg)("inlineCode",{parentName:"li"},'vars: "all"'),")"))),(0,t.yg)("li",{parentName:"ul"},"Related:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/js-style-guide/typescript/base#no-unused-vars"},(0,t.yg)("inlineCode",{parentName:"a"},"@typescript-eslint/no-unused-vars")))))),(0,t.yg)("p",null,"Unused variables are a sign of refactoring artifact and should be removed as early as possible. However, there are the following exceptions:"),(0,t.yg)("div",{className:"shiki-twoslash-fragment"},(0,t.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"tsx"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// Satisfying a type signature")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"plugin"),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},":"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#953800"}},"Plugin"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," ("),(0,t.yg)("span",{parentName:"div",style:{color:"#953800"}},"ast"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},", "),(0,t.yg)("span",{parentName:"div",style:{color:"#953800"}},"options"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},") "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"=>"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// Only use options, but ast has to be declared")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"};")),(0,t.yg)("div",{parentName:"code",className:"line"}),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// Removing properties from objects")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"function"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"Component"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"("),(0,t.yg)("span",{parentName:"div",style:{color:"#953800"}},"props"),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},":"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#953800"}},"Props"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},") {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," { "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"someProp"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},", "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"..."),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"rest"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," } "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," props;")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"return"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," <"),(0,t.yg)("span",{parentName:"div",style:{color:"#116329"}},"div"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," {"),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"..."),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"rest} />;")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"}"))))),(0,t.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"tsx"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// Satisfying a type signature")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"plugin"),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},":"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#FFA657"}},"Plugin"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," ("),(0,t.yg)("span",{parentName:"div",style:{color:"#FFA657"}},"ast"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},", "),(0,t.yg)("span",{parentName:"div",style:{color:"#FFA657"}},"options"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},") "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"=>"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// Only use options, but ast has to be declared")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"};")),(0,t.yg)("div",{parentName:"code",className:"line"}),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// Removing properties from objects")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"function"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"Component"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"("),(0,t.yg)("span",{parentName:"div",style:{color:"#FFA657"}},"props"),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},":"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#FFA657"}},"Props"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},") {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," { "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"someProp"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},", "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"..."),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"rest"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," } "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," props;")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"return"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," <"),(0,t.yg)("span",{parentName:"div",style:{color:"#7EE787"}},"div"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," {"),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"..."),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"rest} />;")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"}")))))),(0,t.yg)("p",null,"If you have an unused error variable, omit the catch binding."),(0,t.yg)("div",{className:"shiki-twoslash-fragment"},(0,t.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"try"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// ...")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"} "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"catch"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  console."),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"error"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"("),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},'"Failed"'),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},");")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"}"))))),(0,t.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"try"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// ...")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"} "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"catch"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  console."),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"error"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"("),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},'"Failed"'),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},");")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"}")))))),(0,t.yg)("h3",{id:"no-use-before-define"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-use-before-define"},(0,t.yg)("inlineCode",{parentName:"a"},"no-use-before-define"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: warning"),(0,t.yg)("li",{parentName:"ul"},"Configuration:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Allow export declarations before declarations (",(0,t.yg)("inlineCode",{parentName:"li"},"allowNamedExports: false"),")"),(0,t.yg)("li",{parentName:"ul"},"Check class declarations (",(0,t.yg)("inlineCode",{parentName:"li"},"classes: true"),")"),(0,t.yg)("li",{parentName:"ul"},"Allow function declarations to be hoisted (",(0,t.yg)("inlineCode",{parentName:"li"},"functions: true"),")"),(0,t.yg)("li",{parentName:"ul"},"Check variable declarations (",(0,t.yg)("inlineCode",{parentName:"li"},"variables: true"),")")))),(0,t.yg)("p",null,"You should generally avoid using variables before they are declared, as doing so leads to an error. For functions, you are free to let them get hoisted. In fact, we recommend the following style:"),(0,t.yg)("div",{className:"shiki-twoslash-fragment"},(0,t.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"function"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"doSomething"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"() {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"doA"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"();")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"doB"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"();")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"doC"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"();")),(0,t.yg)("div",{parentName:"code",className:"line"}),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"function"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"doA"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"() {}")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"function"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"doB"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"() {}")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"function"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"doC"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"() {}")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"}"))))),(0,t.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"function"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"doSomething"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"() {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"doA"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"();")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"doB"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"();")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"doC"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"();")),(0,t.yg)("div",{parentName:"code",className:"line"}),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"function"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"doA"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"() {}")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"function"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"doB"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"() {}")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"function"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"doC"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"() {}")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"}")))))),(0,t.yg)("p",null,"This rule has known false negatives:"),(0,t.yg)("div",{className:"shiki-twoslash-fragment"},(0,t.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"function"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"foo"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"() {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  console."),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"log"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"(x);")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"}")),(0,t.yg)("div",{parentName:"code",className:"line"}),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"foo"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"(); "),(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// Should not work")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"x"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"1"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},";"))))),(0,t.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"function"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"foo"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"() {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  console."),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"log"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"(x);")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"}")),(0,t.yg)("div",{parentName:"code",className:"line"}),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"foo"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"(); "),(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// Should not work")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"x"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"1"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")))))),(0,t.yg)("h3",{id:"no-useless-rename"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-useless-rename"},(0,t.yg)("inlineCode",{parentName:"a"},"no-useless-rename"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,"Don't rename a variable to the same name in import, export, and destructuring."),(0,t.yg)("h3",{id:"one-var"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/one-var"},(0,t.yg)("inlineCode",{parentName:"a"},"one-var"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: off")),(0,t.yg)("p",null,"Generally, you should put each variable declaration on its own line. However, when it makes sense (for example, multiple variables used for very similar purposes: ",(0,t.yg)("inlineCode",{parentName:"p"},"let start = 0, end = 0;"),"), you are free to declare multiple variables consecutively."),(0,t.yg)("h3",{id:"prefer-const"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/prefer-const"},(0,t.yg)("inlineCode",{parentName:"a"},"prefer-const"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error"),(0,t.yg)("li",{parentName:"ul"},"Configuration:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Require ",(0,t.yg)("inlineCode",{parentName:"li"},"const")," as long as any of the destructured variables should be ",(0,t.yg)("inlineCode",{parentName:"li"},"const")," (",(0,t.yg)("inlineCode",{parentName:"li"},'destructuring: "any"'),")"),(0,t.yg)("li",{parentName:"ul"},"Do not ignore variables that are only assigned once and read before assignment (",(0,t.yg)("inlineCode",{parentName:"li"},"ignoreReadBeforeAssign: false"),")")))),(0,t.yg)("p",null,"Only use ",(0,t.yg)("inlineCode",{parentName:"p"},"let")," when the variable is actually reassigned. Otherwise, use ",(0,t.yg)("inlineCode",{parentName:"p"},"const"),", which makes TypeScript infer narrower types, and makes the type of each variable easier to trace."),(0,t.yg)("p",null,"In destructuring, we require using ",(0,t.yg)("inlineCode",{parentName:"p"},"const")," when any of the variables should be ",(0,t.yg)("inlineCode",{parentName:"p"},"const"),". Otherwise, this may lead to spillover writability. If you want to make some of the variables ",(0,t.yg)("inlineCode",{parentName:"p"},"let"),", you should destructure them separately."),(0,t.yg)("div",{className:"shiki-twoslash-fragment"},(0,t.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"result"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"doSomething"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"();")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," { "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"a"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},", "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"b"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," } "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," result;")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"let"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," { c, d } "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," result;"))))),(0,t.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"result"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"doSomething"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"();")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," { "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"a"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},", "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"b"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," } "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," result;")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"let"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," { c, d } "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," result;")))))),(0,t.yg)("h3",{id:"prefer-destructuring"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/prefer-destructuring"},(0,t.yg)("inlineCode",{parentName:"a"},"prefer-destructuring"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error"),(0,t.yg)("li",{parentName:"ul"},"Configuration:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Require destructuring for arrays (",(0,t.yg)("inlineCode",{parentName:"li"},"array: true"),")"),(0,t.yg)("li",{parentName:"ul"},"Require destructuring for objects (",(0,t.yg)("inlineCode",{parentName:"li"},"object: true"),")"),(0,t.yg)("li",{parentName:"ul"},"Do not require destructuring when the variable is renamed (",(0,t.yg)("inlineCode",{parentName:"li"},"enforceForRenamedProperties: false"),")")))),(0,t.yg)("p",null,"Destructuring is generally preferred over accessing properties directly. It makes the code more concise and easier to read. There are some catches:"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},"When you are accessing a high array index (for example, ",(0,t.yg)("inlineCode",{parentName:"li"},"const char = str[5]"),"), you may not want to use destructuring like ",(0,t.yg)("inlineCode",{parentName:"li"},"const [, , , , , char] = str"),". Disable the rule in this case."),(0,t.yg)("li",{parentName:"ol"},"In performance-critical cases, array destructuring is slower than property access. ",(0,t.yg)("inlineCode",{parentName:"li"},"const { 0: x } = a")," may be faster than ",(0,t.yg)("inlineCode",{parentName:"li"},"const [x] = a"),". This does not matter in general."),(0,t.yg)("li",{parentName:"ol"},"Not all index accesses can be safely refactored to array destructuring, unless the object is also iterable. You should use your own discretion when fixing the error.")),(0,t.yg)("h3",{id:"vars-on-top"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/vars-on-top"},(0,t.yg)("inlineCode",{parentName:"a"},"vars-on-top"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,"We don't usually allow ",(0,t.yg)("inlineCode",{parentName:"p"},"var"),"s. When you do use them, put them at the top level of functions/scripts to minimize its quirks."),(0,t.yg)("h2",{id:"naming-conventions"},"Naming conventions"),(0,t.yg)("h3",{id:"camelcase"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/camelcase"},(0,t.yg)("inlineCode",{parentName:"a"},"camelcase"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error"),(0,t.yg)("li",{parentName:"ul"},"Configuration:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Require destructured variables to be camelCase (",(0,t.yg)("inlineCode",{parentName:"li"},"ignoreDestructuring: false"),")"),(0,t.yg)("li",{parentName:"ul"},"Require global variables to be camelCase (",(0,t.yg)("inlineCode",{parentName:"li"},"ignoreGlobals: false"),")"),(0,t.yg)("li",{parentName:"ul"},"Require imported variables to be camelCase (",(0,t.yg)("inlineCode",{parentName:"li"},"ignoreImports: false"),")"),(0,t.yg)("li",{parentName:"ul"},"Ignore property names in object literals (",(0,t.yg)("inlineCode",{parentName:"li"},'properties: "never"'),")")))),(0,t.yg)("p",null,"Until we fully use ",(0,t.yg)("inlineCode",{parentName:"p"},"@typescript-eslint/naming-convention"),", we will still use this rule to enforce camelCase where possible. We don't check object properties because the object may be passed to a third-party library:"),(0,t.yg)("div",{className:"shiki-twoslash-fragment"},(0,t.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"checkESLint"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"({")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  config: {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"    camel_case: "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"true"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},",")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  },")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"});"))))),(0,t.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"checkESLint"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"({")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  config: {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"    camel_case: "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"true"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},",")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  },")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"});")))))),(0,t.yg)("h3",{id:"id-denylist"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/id-denylist"},(0,t.yg)("inlineCode",{parentName:"a"},"id-denylist"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: off")),(0,t.yg)("p",null,"You may want to configure this yourself if you want to ban certain identifiers."),(0,t.yg)("h3",{id:"id-length"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/id-length"},(0,t.yg)("inlineCode",{parentName:"a"},"id-length"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: off")),(0,t.yg)("p",null,"We don't think length is a good metric for name quality."),(0,t.yg)("h3",{id:"id-match"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/id-match"},(0,t.yg)("inlineCode",{parentName:"a"},"id-match"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: off")),(0,t.yg)("p",null,"This rule is fully covered by ",(0,t.yg)("inlineCode",{parentName:"p"},"@typescript-eslint/naming-convention"),"."),(0,t.yg)("h3",{id:"no-shadow-restricted-names"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-shadow-restricted-names"},(0,t.yg)("inlineCode",{parentName:"a"},"no-shadow-restricted-names"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,"Don't declare a binding called ",(0,t.yg)("inlineCode",{parentName:"p"},"undefined"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"NaN"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"Infinity"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"eval"),", or ",(0,t.yg)("inlineCode",{parentName:"p"},"arguments"),". You know exactly what values they represent."),(0,t.yg)("h3",{id:"no-underscore-dangle"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-underscore-dangle"},(0,t.yg)("inlineCode",{parentName:"a"},"no-underscore-dangle"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: off")),(0,t.yg)("p",null,"You should generally avoid underscored names and prefer proper encapsulation instead (such as through closures and private names). Do ",(0,t.yg)("em",{parentName:"p"},"not")," use underscores to represent throwaway names; just leave it unused (such cases include object destructuring to throw the property away, or function parameters). However, there are cases where you have to use underscores, such as when the name is expected by an external API."),(0,t.yg)("h2",{id:"globals"},"Globals"),(0,t.yg)("h3",{id:"no-alert"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-alert"},(0,t.yg)("inlineCode",{parentName:"a"},"no-alert"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,"There is no good reason to use ",(0,t.yg)("inlineCode",{parentName:"p"},"alert"),"/",(0,t.yg)("inlineCode",{parentName:"p"},"confirm"),"/",(0,t.yg)("inlineCode",{parentName:"p"},"prompt")," in production. They are blocking and look too much like system dialogs."),(0,t.yg)("h3",{id:"no-console"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-console"},(0,t.yg)("inlineCode",{parentName:"a"},"no-console"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: can be enabled")),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"console.log")," is commonly left as debugging artifacts and can occasionally disrupt the console log formatting. For example, Webpack has the unified ",(0,t.yg)("a",{parentName:"p",href:"https://webpack.js.org/api/logging/"},"logger interface")," for emitting messages. Projects are encouraged to encapsulate their own logger instance as well for unified message formatting and semantics."),(0,t.yg)("p",null,"However, in more casual projects without a wrapped logger, using ",(0,t.yg)("inlineCode",{parentName:"p"},"console.log")," may be intentional. This rule can be overridden in user-land."),(0,t.yg)("h3",{id:"no-eval"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-eval"},(0,t.yg)("inlineCode",{parentName:"a"},"no-eval"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error"),(0,t.yg)("li",{parentName:"ul"},"Configuration:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Do not allow indirect ",(0,t.yg)("inlineCode",{parentName:"li"},"eval")," (",(0,t.yg)("inlineCode",{parentName:"li"},"allowIndirect: false"),")")))),(0,t.yg)("p",null,"There is not much reason you should use ",(0,t.yg)("inlineCode",{parentName:"p"},"eval"),"\u2014many safe alternatives exist. Indirect ",(0,t.yg)("inlineCode",{parentName:"p"},"eval")," in strict mode tends to be safe but is still frowned upon. In case you really need to dynamically evaluate code, use ",(0,t.yg)("inlineCode",{parentName:"p"},"new Function")," instead, which also allows injecting variables via parameters."),(0,t.yg)("h3",{id:"no-global-assign"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-global-assign"},(0,t.yg)("inlineCode",{parentName:"a"},"no-global-assign"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: off")),(0,t.yg)("p",null,"We have to turn this rule off, because we cannot make ESLint aware of every global, so the reports are too inconsistent and unhelpful. However, you should know from your heart to only reassign variables in your scope. If you want to modify globals, use ",(0,t.yg)("inlineCode",{parentName:"p"},"globalThis.x")," instead to make your intention explicit."),(0,t.yg)("h3",{id:"no-implied-eval"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-implied-eval"},(0,t.yg)("inlineCode",{parentName:"a"},"no-implied-eval"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,"There is no good reason to use ",(0,t.yg)("inlineCode",{parentName:"p"},"setTimeout"),"/",(0,t.yg)("inlineCode",{parentName:"p"},"setInterval")," with a string argument. Use a function instead."),(0,t.yg)("h3",{id:"no-iterator"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-iterator"},(0,t.yg)("inlineCode",{parentName:"a"},"no-iterator"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,"Don't use the ",(0,t.yg)("inlineCode",{parentName:"p"},"__iterator__")," property. No one implements it."),(0,t.yg)("h3",{id:"no-new-func"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-new-func"},(0,t.yg)("inlineCode",{parentName:"a"},"no-new-func"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,"You should generally avoid using the ",(0,t.yg)("inlineCode",{parentName:"p"},"Function")," constructor, because it is just another form of dynamic evaluation. However, compared to ",(0,t.yg)("inlineCode",{parentName:"p"},"eval"),", it is easier to be used safely, and in case when you need to dynamically evaluate code, you should prefer to use this instead of ",(0,t.yg)("inlineCode",{parentName:"p"},"eval"),"."),(0,t.yg)("h3",{id:"no-new-native-nonconstructor"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-new-native-nonconstructor"},(0,t.yg)("inlineCode",{parentName:"a"},"no-new-native-nonconstructor"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error"),(0,t.yg)("li",{parentName:"ul"},"Related:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"ts(7009): 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type."))))),(0,t.yg)("p",null,"Don't construct ",(0,t.yg)("inlineCode",{parentName:"p"},"Symbol")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"BigInt")," because they are not meant for construction."),(0,t.yg)("h3",{id:"no-new-wrappers"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-new-wrappers"},(0,t.yg)("inlineCode",{parentName:"a"},"no-new-wrappers"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,"Don't construct ",(0,t.yg)("inlineCode",{parentName:"p"},"String"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"Number"),", and ",(0,t.yg)("inlineCode",{parentName:"p"},"Boolean")," objects because they are much harder to use and do not have any benefits over primitives."),(0,t.yg)("h3",{id:"no-obj-calls"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-obj-calls"},(0,t.yg)("inlineCode",{parentName:"a"},"no-obj-calls"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error"),(0,t.yg)("li",{parentName:"ul"},"Related:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"ts(2349): This expression is not callable. Type 'Math' has no call signatures."))))),(0,t.yg)("p",null,"Don't call ",(0,t.yg)("inlineCode",{parentName:"p"},"Math"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"JSON"),", and other namespaces."),(0,t.yg)("h3",{id:"no-object-constructor"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-object-constructor"},(0,t.yg)("inlineCode",{parentName:"a"},"no-object-constructor"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,"Don't use ",(0,t.yg)("inlineCode",{parentName:"p"},"new Object()")," because it's just a longer way of writing ",(0,t.yg)("inlineCode",{parentName:"p"},"{}"),". Always use ",(0,t.yg)("inlineCode",{parentName:"p"},"Object")," with an argument."),(0,t.yg)("h3",{id:"no-proto"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-proto"},(0,t.yg)("inlineCode",{parentName:"a"},"no-proto"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,"Don't access the ",(0,t.yg)("inlineCode",{parentName:"p"},"__proto__")," property. Use ",(0,t.yg)("inlineCode",{parentName:"p"},"Object.getPrototypeOf")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"Object.setPrototypeOf")," instead. Note that the ",(0,t.yg)("inlineCode",{parentName:"p"},"__proto__")," syntax in object literals is still allowed and should be preferred over ",(0,t.yg)("inlineCode",{parentName:"p"},"Object.create"),"."),(0,t.yg)("div",{className:"shiki-twoslash-fragment"},(0,t.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// Write this:")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"obj"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  __proto__: "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"null"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},",")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"};")),(0,t.yg)("div",{parentName:"code",className:"line"}),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// Instead of this:")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"obj"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"Object"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"."),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"create"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"("),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"null"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},");"))))),(0,t.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// Write this:")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"obj"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  __proto__: "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"null"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},",")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"};")),(0,t.yg)("div",{parentName:"code",className:"line"}),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// Instead of this:")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"obj"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"Object"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"."),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"create"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"("),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"null"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},");")))))),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},"TypeScript does not support the ",(0,t.yg)("inlineCode",{parentName:"p"},"__proto__")," syntax in object literals yet. However, ",(0,t.yg)("inlineCode",{parentName:"p"},"Object.create")," will be always typed as ",(0,t.yg)("inlineCode",{parentName:"p"},"any"),", so the former should still be preferred. Cast with ",(0,t.yg)("inlineCode",{parentName:"p"},"null as never")," when necessary.")),(0,t.yg)("h3",{id:"no-prototype-builtins"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-prototype-builtins"},(0,t.yg)("inlineCode",{parentName:"a"},"no-prototype-builtins"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,"Don't use ",(0,t.yg)("inlineCode",{parentName:"p"},"Object.prototype")," methods because they are not safe against ",(0,t.yg)("inlineCode",{parentName:"p"},"null")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"undefined"),". Generally, you don't need to jump hoops to get similar behavior."),(0,t.yg)("div",{className:"shiki-twoslash-fragment"},(0,t.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// Instead of:")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"foo."),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"hasOwnProperty"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"("),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},'"bar"'),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},");")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"foo."),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"propertyIsEnumerable"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"("),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},'"bar"'),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},");")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"foo."),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"isPrototypeOf"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"(bar);")),(0,t.yg)("div",{parentName:"code",className:"line"}),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// Write:")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"Object"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"."),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"hasOwn"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"(foo, "),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},'"bar"'),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},");")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"Object"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"."),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"getOwnPropertyDescriptor"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"(foo, "),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},'"bar"'),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},")?.enumerable;")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"Object"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"."),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"prototype"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},".isPrototypeOf."),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"call"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"(foo, bar); "),(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// Do you really need this?"))))),(0,t.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// Instead of:")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"foo."),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"hasOwnProperty"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"("),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},'"bar"'),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},");")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"foo."),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"propertyIsEnumerable"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"("),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},'"bar"'),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},");")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"foo."),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"isPrototypeOf"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"(bar);")),(0,t.yg)("div",{parentName:"code",className:"line"}),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// Write:")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"Object"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"."),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"hasOwn"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"(foo, "),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},'"bar"'),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},");")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"Object"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"."),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"getOwnPropertyDescriptor"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"(foo, "),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},'"bar"'),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},")?.enumerable;")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"Object"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"."),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"prototype"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},".isPrototypeOf."),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"call"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"(foo, bar); "),(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// Do you really need this?")))))),(0,t.yg)("h3",{id:"no-restricted-properties"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-restricted-properties"},(0,t.yg)("inlineCode",{parentName:"a"},"no-restricted-properties"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: off")),(0,t.yg)("p",null,"You may want to configure this yourself if you want to ban certain identifiers or certain properties."),(0,t.yg)("h3",{id:"no-undef"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-undef"},(0,t.yg)("inlineCode",{parentName:"a"},"no-undef"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error"),(0,t.yg)("li",{parentName:"ul"},"Configuration:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Disallow using ",(0,t.yg)("inlineCode",{parentName:"li"},"typeof")," on undefined variables (",(0,t.yg)("inlineCode",{parentName:"li"},"typeof: true"),")"))),(0,t.yg)("li",{parentName:"ul"},"Related:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"ts(2304): Cannot find name 'a'."))))),(0,t.yg)("p",null,"Don't use undefined variables. If you want to check if a variable is defined, use ",(0,t.yg)("inlineCode",{parentName:"p"},'if ("x" in globalThis)')," or ",(0,t.yg)("inlineCode",{parentName:"p"},'if (typeof globalThis.x !== "undefined")'),"."),(0,t.yg)("p",null,"Note that this rule is only useful in a plain-JS project. In a TypeScript project, you should use TypeScript checks instead. You may find cases where ESLint is unaware of a global variable. In this case, either change your ",(0,t.yg)("inlineCode",{parentName:"p"},"env")," setting, or use ",(0,t.yg)("inlineCode",{parentName:"p"},"globalThis.x"),"."),(0,t.yg)("h3",{id:"no-undefined"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-undefined"},(0,t.yg)("inlineCode",{parentName:"a"},"no-undefined"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: off")),(0,t.yg)("p",null,"There's virtually no risk to use ",(0,t.yg)("inlineCode",{parentName:"p"},"undefined")," nowadays, especially with rules like ",(0,t.yg)("inlineCode",{parentName:"p"},"no-shadow-restricted-names"),". Furthermore, because ",(0,t.yg)("inlineCode",{parentName:"p"},"undefined"),' is so pervasive as the implicit "value of absence", it\'s hard to avoid it. You should generally use ',(0,t.yg)("inlineCode",{parentName:"p"},"undefined")," instead of ",(0,t.yg)("inlineCode",{parentName:"p"},"null")," as the default value, unless the latter has a semantic difference from ",(0,t.yg)("inlineCode",{parentName:"p"},"undefined"),"."),(0,t.yg)("h3",{id:"prefer-object-has-own"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/prefer-object-has-own"},(0,t.yg)("inlineCode",{parentName:"a"},"prefer-object-has-own"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,"Use ",(0,t.yg)("inlineCode",{parentName:"p"},"Object.hasOwn")," instead of ",(0,t.yg)("inlineCode",{parentName:"p"},"Object.prototype.hasOwnProperty.call"),". It's shorter and more readable. If you need compatibility, install a polyfill. (You should never use ",(0,t.yg)("inlineCode",{parentName:"p"},"x.hasOwnProperty"),", by the way; see ",(0,t.yg)("a",{parentName:"p",href:"#no-prototype-builtins"},(0,t.yg)("inlineCode",{parentName:"a"},"no-prototype-builtins")),".)"))}c.isMDXComponent=!0}}]);