"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[377],{9916:(e,a,r)=>{r.d(a,{xA:()=>p,yg:()=>m});var t=r(3696);function n(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function l(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?l(Object(r),!0).forEach((function(a){n(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function s(e,a){if(null==e)return{};var r,t,n=function(e,a){if(null==e)return{};var r,t,n={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],a.indexOf(r)>=0||(n[r]=e[r]);return n}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=t.createContext({}),y=function(e){var a=t.useContext(i),r=a;return e&&(r="function"==typeof e?e(a):o(o({},a),e)),r},p=function(e){var a=y(e.components);return t.createElement(i.Provider,{value:a},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},g=t.forwardRef((function(e,a){var r=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=y(r),g=n,m=c["".concat(i,".").concat(g)]||c[g]||d[g]||l;return r?t.createElement(m,o(o({ref:a},p),{},{components:r})):t.createElement(m,o({ref:a},p))}));function m(e,a){var r=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var l=r.length,o=new Array(l);o[0]=g;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s[c]="string"==typeof e?e:n,o[1]=s;for(var y=2;y<l;y++)o[y]=r[y];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},6457:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>y});var t=r(8102),n=(r(3696),r(9916));const l={sidebar_position:8},o="Collections",s={unversionedId:"eslint-base/collections",id:"eslint-base/collections",title:"Collections",description:"This page introduces rules related to arrays and other structures.",source:"@site/../docs/eslint-base/collections.md",sourceDirName:"eslint-base",slug:"/eslint-base/collections",permalink:"/js-style-guide/eslint-base/collections",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"defaultSidebar",previous:{title:"Objects & classes",permalink:"/js-style-guide/eslint-base/objects-classes"},next:{title:"Async operations",permalink:"/js-style-guide/eslint-base/async"}},i={},y=[{value:"Arrays",id:"arrays",level:2},{value:"<code>array-callback-return</code>",id:"array-callback-return",level:3},{value:"<code>no-array-constructor</code>",id:"no-array-constructor",level:3},{value:"<code>no-sparse-arrays</code>",id:"no-sparse-arrays",level:3}],p={toc:y},c="wrapper";function d(e){let{components:a,...r}=e;return(0,n.yg)(c,(0,t.A)({},p,r,{components:a,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"collections"},"Collections"),(0,n.yg)("p",null,"This page introduces rules related to arrays and other structures."),(0,n.yg)("h2",{id:"arrays"},"Arrays"),(0,n.yg)("h3",{id:"array-callback-return"},(0,n.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/array-callback-return"},(0,n.yg)("inlineCode",{parentName:"a"},"array-callback-return"))),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Severity: error"),(0,n.yg)("li",{parentName:"ul"},"Configuration:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Disallow ",(0,n.yg)("inlineCode",{parentName:"li"},"return;")," to implicitly mean ",(0,n.yg)("inlineCode",{parentName:"li"},"return undefined;")," (",(0,n.yg)("inlineCode",{parentName:"li"},"allowImplicit: false"),")"),(0,n.yg)("li",{parentName:"ul"},"Do not enforce that ",(0,n.yg)("inlineCode",{parentName:"li"},"forEach")," callback doesn't return a value (",(0,n.yg)("inlineCode",{parentName:"li"},"checkForEach: true"),")")))),(0,n.yg)("p",null,"The intention of this rule is clear: to make the usage of array methods more appropriate. ",(0,n.yg)("inlineCode",{parentName:"p"},"Array#forEach")," is the only method that's designed to be purely for its side-effects, while all the other methods should not only return a value, but also strive to be side-effect-free. Note that TypeScript doesn't check the return type of callbacks, because the callbacks are very loosely typed."),(0,n.yg)("p",null,"However, we have to give up on checking ",(0,n.yg)("inlineCode",{parentName:"p"},"forEach"),", due to false-positives with concise arrows. Consider this:"),(0,n.yg)("div",{className:"shiki-twoslash-fragment"},(0,n.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,n.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,n.yg)("div",{parentName:"pre",className:"code-container"},(0,n.yg)("code",{parentName:"div"},(0,n.yg)("div",{parentName:"code",className:"line"},(0,n.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,n.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,n.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"arr"),(0,n.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,n.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,n.yg)("span",{parentName:"div",style:{color:"#24292F"}}," ["),(0,n.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"1"),(0,n.yg)("span",{parentName:"div",style:{color:"#24292F"}},", "),(0,n.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"2"),(0,n.yg)("span",{parentName:"div",style:{color:"#24292F"}},", "),(0,n.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"3"),(0,n.yg)("span",{parentName:"div",style:{color:"#24292F"}},"];")),(0,n.yg)("div",{parentName:"code",className:"line"},(0,n.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,n.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,n.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"set"),(0,n.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,n.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,n.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,n.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"new"),(0,n.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,n.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"Set"),(0,n.yg)("span",{parentName:"div",style:{color:"#24292F"}},"<"),(0,n.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"number"),(0,n.yg)("span",{parentName:"div",style:{color:"#24292F"}},">();")),(0,n.yg)("div",{parentName:"code",className:"line"},(0,n.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// checkForEach will report this case as well")),(0,n.yg)("div",{parentName:"code",className:"line"},(0,n.yg)("span",{parentName:"div",style:{color:"#24292F"}},"arr."),(0,n.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"forEach"),(0,n.yg)("span",{parentName:"div",style:{color:"#24292F"}},"(("),(0,n.yg)("span",{parentName:"div",style:{color:"#953800"}},"x"),(0,n.yg)("span",{parentName:"div",style:{color:"#24292F"}},") "),(0,n.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"=>"),(0,n.yg)("span",{parentName:"div",style:{color:"#24292F"}}," set."),(0,n.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"add"),(0,n.yg)("span",{parentName:"div",style:{color:"#24292F"}},"(x));"))))),(0,n.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,n.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,n.yg)("div",{parentName:"pre",className:"code-container"},(0,n.yg)("code",{parentName:"div"},(0,n.yg)("div",{parentName:"code",className:"line"},(0,n.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,n.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,n.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"arr"),(0,n.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,n.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,n.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," ["),(0,n.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"1"),(0,n.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},", "),(0,n.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"2"),(0,n.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},", "),(0,n.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"3"),(0,n.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"];")),(0,n.yg)("div",{parentName:"code",className:"line"},(0,n.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,n.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,n.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"set"),(0,n.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,n.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,n.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,n.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"new"),(0,n.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,n.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"Set"),(0,n.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"<"),(0,n.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"number"),(0,n.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},">();")),(0,n.yg)("div",{parentName:"code",className:"line"},(0,n.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// checkForEach will report this case as well")),(0,n.yg)("div",{parentName:"code",className:"line"},(0,n.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"arr."),(0,n.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"forEach"),(0,n.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"(("),(0,n.yg)("span",{parentName:"div",style:{color:"#FFA657"}},"x"),(0,n.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},") "),(0,n.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"=>"),(0,n.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," set."),(0,n.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"add"),(0,n.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"(x));")))))),(0,n.yg)("p",null,"Note that this rule can still false-positive when calling a method on a non-array object. However, we still set the severity as error because:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"The necessity of enforcing callback return values far outweighs the risk of false-positive."),(0,n.yg)("li",{parentName:"ul"},"Most APIs that are called ",(0,n.yg)("inlineCode",{parentName:"li"},"map")," or ",(0,n.yg)("inlineCode",{parentName:"li"},"filter")," are sanely designed and function in a similar fashion as array methods.")),(0,n.yg)("h3",{id:"no-array-constructor"},(0,n.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-array-constructor"},(0,n.yg)("inlineCode",{parentName:"a"},"no-array-constructor"))),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Severity: error"),(0,n.yg)("li",{parentName:"ul"},"Related:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"@typescript-eslint/no-array-constructor"))))),(0,n.yg)("p",null,"We disallow the use of ",(0,n.yg)("inlineCode",{parentName:"p"},"Array()")," because you should always prefer array literals. Even in the case of ",(0,n.yg)("inlineCode",{parentName:"p"},"Array<T>()"),", you should generally use ",(0,n.yg)("inlineCode",{parentName:"p"},"[] as T[]")," instead."),(0,n.yg)("h3",{id:"no-sparse-arrays"},(0,n.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-sparse-arrays"},(0,n.yg)("inlineCode",{parentName:"a"},"no-sparse-arrays"))),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Severity: error")),(0,n.yg)("p",null,"Don't create sparse arrays. They are very hard to optimize and behave inconsistently with different array methods. This rule only checks array literals, but you should: (a) generally not use ",(0,n.yg)("inlineCode",{parentName:"p"},"Array(length)")," (b) don't ",(0,n.yg)("inlineCode",{parentName:"p"},"delete")," array indices (c) don't manually extend the ",(0,n.yg)("inlineCode",{parentName:"p"},"length")," property."))}d.isMDXComponent=!0}}]);