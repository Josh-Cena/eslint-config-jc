"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[709],{9916:(e,a,r)=>{r.d(a,{xA:()=>y,yg:()=>m});var n=r(3696);function t(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function l(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?l(Object(r),!0).forEach((function(a){t(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function o(e,a){if(null==e)return{};var r,n,t=function(e,a){if(null==e)return{};var r,n,t={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],a.indexOf(r)>=0||(t[r]=e[r]);return t}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var i=n.createContext({}),p=function(e){var a=n.useContext(i),r=a;return e&&(r="function"==typeof e?e(a):s(s({},a),e)),r},y=function(e){var a=p(e.components);return n.createElement(i.Provider,{value:a},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var r=e.components,t=e.mdxType,l=e.originalType,i=e.parentName,y=o(e,["components","mdxType","originalType","parentName"]),c=p(r),d=t,m=c["".concat(i,".").concat(d)]||c[d]||g[d]||l;return r?n.createElement(m,s(s({ref:a},y),{},{components:r})):n.createElement(m,s({ref:a},y))}));function m(e,a){var r=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var l=r.length,s=new Array(l);s[0]=d;var o={};for(var i in a)hasOwnProperty.call(a,i)&&(o[i]=a[i]);o.originalType=e,o[c]="string"==typeof e?e:t,s[1]=o;for(var p=2;p<l;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8306:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>g,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=r(8102),t=(r(3696),r(9916));const l={sidebar_position:2},s="Literals",o={unversionedId:"eslint-base/literals",id:"eslint-base/literals",title:"Literals",description:"This page discusses styles for number, string, and regex literals, as well as template/symbol expressions.",source:"@site/../docs/eslint-base/literals.md",sourceDirName:"eslint-base",slug:"/eslint-base/literals",permalink:"/js-style-guide/eslint-base/literals",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"General formatting",permalink:"/js-style-guide/eslint-base/formatting"},next:{title:"Variables & names",permalink:"/js-style-guide/eslint-base/variables-names"}},i={},p=[{value:"Number literals",id:"number-literals",level:2},{value:"<code>no-loss-of-precision</code>",id:"no-loss-of-precision",level:3},{value:"<code>no-magic-numbers</code>",id:"no-magic-numbers",level:3},{value:"<code>no-octal</code>",id:"no-octal",level:3},{value:"<code>prefer-numeric-literals</code>",id:"prefer-numeric-literals",level:3},{value:"<code>radix</code>",id:"radix",level:3},{value:"String literals",id:"string-literals",level:2},{value:"<code>no-multi-str</code>",id:"no-multi-str",level:3},{value:"<code>no-nonoctal-decimal-escape</code>",id:"no-nonoctal-decimal-escape",level:3},{value:"<code>no-octal-escape</code>",id:"no-octal-escape",level:3},{value:"<code>no-script-url</code>",id:"no-script-url",level:3},{value:"<code>no-template-curly-in-string</code>",id:"no-template-curly-in-string",level:3},{value:"<code>no-useless-concat</code>",id:"no-useless-concat",level:3},{value:"<code>no-useless-escape</code>",id:"no-useless-escape",level:3},{value:"<code>prefer-template</code>",id:"prefer-template",level:3},{value:"Regular expressions",id:"regular-expressions",level:2},{value:"Prefer concise syntax",id:"prefer-concise-syntax",level:3},{value:"<code>no-control-regex</code>",id:"no-control-regex",level:3},{value:"<code>no-div-regex</code>",id:"no-div-regex",level:3},{value:"<code>no-empty-character-class</code>",id:"no-empty-character-class",level:3},{value:"<code>no-invalid-regexp</code>",id:"no-invalid-regexp",level:3},{value:"<code>no-misleading-character-class</code>",id:"no-misleading-character-class",level:3},{value:"<code>no-regex-spaces</code>",id:"no-regex-spaces",level:3},{value:"<code>no-useless-backreference</code>",id:"no-useless-backreference",level:3},{value:"<code>prefer-named-capture-group</code>",id:"prefer-named-capture-group",level:3},{value:"<code>prefer-regex-literals</code>",id:"prefer-regex-literals",level:3},{value:"<code>require-unicode-regexp</code>",id:"require-unicode-regexp",level:3},{value:"Symbols",id:"symbols",level:2},{value:"<code>symbol-description</code>",id:"symbol-description",level:3}],y={toc:p},c="wrapper";function g(e){let{components:a,...r}=e;return(0,t.yg)(c,(0,n.A)({},y,r,{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"literals"},"Literals"),(0,t.yg)("p",null,"This page discusses styles for number, string, and regex literals, as well as template/symbol expressions."),(0,t.yg)("h2",{id:"number-literals"},"Number literals"),(0,t.yg)("h3",{id:"no-loss-of-precision"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-loss-of-precision"},(0,t.yg)("inlineCode",{parentName:"a"},"no-loss-of-precision"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,"Do not use numbers literals that don't represent what they look like. For example, ",(0,t.yg)("inlineCode",{parentName:"p"},"5123000000000000000000000000001")," does not represent that number. Note that this rule works automatically with literal types."),(0,t.yg)("h3",{id:"no-magic-numbers"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-magic-numbers"},(0,t.yg)("inlineCode",{parentName:"a"},"no-magic-numbers"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: off")),(0,t.yg)("p",null,"You are free to use numbers as you see fit."),(0,t.yg)("div",{className:"shiki-twoslash-fragment"},(0,t.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"for"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," ("),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"let"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," i "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"0"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"; i "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"<"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," groups."),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"length"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"; i "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"+="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"2"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},") {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"x"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," groups[i];")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"y"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," groups[i "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"+"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"1"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"];")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"}"))))),(0,t.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"for"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," ("),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"let"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," i "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"0"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"; i "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"<"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," groups."),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"length"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"; i "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"+="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"2"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},") {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"x"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," groups[i];")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"y"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," groups[i "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"+"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"1"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"];")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"}")))))),(0,t.yg)("p",null,"Use comments if the numbers are not self-explanatory."),(0,t.yg)("h3",{id:"no-octal"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-octal"},(0,t.yg)("inlineCode",{parentName:"a"},"no-octal"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error"),(0,t.yg)("li",{parentName:"ul"},"Related:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"ts(1489): Decimals with leading zeros are not allowed."))))),(0,t.yg)("p",null,"Do not use legacy octal literals (",(0,t.yg)("inlineCode",{parentName:"p"},"011"),"). They are deprecated and are syntax errors in strict mode. Use ",(0,t.yg)("inlineCode",{parentName:"p"},"0o")," instead."),(0,t.yg)("h3",{id:"prefer-numeric-literals"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/prefer-numeric-literals"},(0,t.yg)("inlineCode",{parentName:"a"},"prefer-numeric-literals"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,"Use ",(0,t.yg)("inlineCode",{parentName:"p"},"0b")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"0o")," number literals instead of ",(0,t.yg)("inlineCode",{parentName:"p"},"parseInt")," with a static string."),(0,t.yg)("h3",{id:"radix"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/radix"},(0,t.yg)("inlineCode",{parentName:"a"},"radix"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error"),(0,t.yg)("li",{parentName:"ul"},"Configuration:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Always require a radix (",(0,t.yg)("inlineCode",{parentName:"li"},'"always"'),")")))),(0,t.yg)("p",null,"You should always use ",(0,t.yg)("inlineCode",{parentName:"p"},"parseInt")," with a radix. This prevents accidental behavior inconsistencies when the string starts with ",(0,t.yg)("inlineCode",{parentName:"p"},"0")," or ",(0,t.yg)("inlineCode",{parentName:"p"},"0x"),". If you intentionally want to accommodate many number formats, use the ",(0,t.yg)("inlineCode",{parentName:"p"},"Number")," constructor instead."),(0,t.yg)("h2",{id:"string-literals"},"String literals"),(0,t.yg)("h3",{id:"no-multi-str"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-multi-str"},(0,t.yg)("inlineCode",{parentName:"a"},"no-multi-str"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,"Do not use ",(0,t.yg)("inlineCode",{parentName:"p"},"\\")," to split strings across multiple lines\u2014it doesn't work well with indentation. Write string literals that are as long as you want."),(0,t.yg)("h3",{id:"no-nonoctal-decimal-escape"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-nonoctal-decimal-escape"},(0,t.yg)("inlineCode",{parentName:"a"},"no-nonoctal-decimal-escape"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,"Do not use ",(0,t.yg)("inlineCode",{parentName:"p"},"\\8")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"\\9")," in string literals because they are useless and confusing. Just write ",(0,t.yg)("inlineCode",{parentName:"p"},"8")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"9")," instead."),(0,t.yg)("h3",{id:"no-octal-escape"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-octal-escape"},(0,t.yg)("inlineCode",{parentName:"a"},"no-octal-escape"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error"),(0,t.yg)("li",{parentName:"ul"},"Related:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"ts(1487): Octal escape sequences are not allowed. Use the syntax '\\x3f'."))))),(0,t.yg)("p",null,"Do not use octal escapes in string literals. They are deprecated and are syntax errors in strict mode. Use ",(0,t.yg)("inlineCode",{parentName:"p"},"\\x")," or ",(0,t.yg)("inlineCode",{parentName:"p"},"\\u")," instead."),(0,t.yg)("h3",{id:"no-script-url"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-script-url"},(0,t.yg)("inlineCode",{parentName:"a"},"no-script-url"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,"Do not use ",(0,t.yg)("inlineCode",{parentName:"p"},"javascript:")," URLs. They are a form of ",(0,t.yg)("inlineCode",{parentName:"p"},"eval"),"."),(0,t.yg)("h3",{id:"no-template-curly-in-string"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-template-curly-in-string"},(0,t.yg)("inlineCode",{parentName:"a"},"no-template-curly-in-string"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: warning Usually, using the ",(0,t.yg)("inlineCode",{parentName:"li"},"${}")," syntax in a string literal is a mistake. However, it's not a deadly error, so we only set it to warning.")),(0,t.yg)("h3",{id:"no-useless-concat"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-useless-concat"},(0,t.yg)("inlineCode",{parentName:"a"},"no-useless-concat"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,'Do not use string concatenation when you can just use a single string literal. You should generally not use string concatenation to make a "multi-line string" either\u2014just make the string literal as long as you want.'),(0,t.yg)("h3",{id:"no-useless-escape"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-useless-escape"},(0,t.yg)("inlineCode",{parentName:"a"},"no-useless-escape"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,"Do not use ",(0,t.yg)("inlineCode",{parentName:"p"},"\\")," to escape characters that do not need escaping. It's confusing and unnecessary. In regexes, these identity escapes cause syntax errors in Unicode mode (which is required)."),(0,t.yg)("h3",{id:"prefer-template"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/prefer-template"},(0,t.yg)("inlineCode",{parentName:"a"},"prefer-template"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,"Use template literals instead of string concatenation. It's more readable and less error-prone. Use it ",(0,t.yg)("em",{parentName:"p"},"everywhere")," \u2014 never use ",(0,t.yg)("inlineCode",{parentName:"p"},"+")," for string concatenation. This includes ",(0,t.yg)("inlineCode",{parentName:"p"},"str1 + str2"),", which should be written as ",(0,t.yg)("inlineCode",{parentName:"p"},"`${str1}${str2}`"),"."),(0,t.yg)("h2",{id:"regular-expressions"},"Regular expressions"),(0,t.yg)("h3",{id:"prefer-concise-syntax"},"Prefer concise syntax"),(0,t.yg)("p",null,"There are many ways to represent the same regular expression. Instead of this:"),(0,t.yg)("div",{className:"shiki-twoslash-fragment"},(0,t.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"rule"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  test:"),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}}," /"),(0,t.yg)("span",{parentName:"div",style:{color:"#116329"}},"\\."),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},"(?:js"),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"|"),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},"ts"),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"|"),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},"jsx"),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"|"),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},"tsx)/"),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"i"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},",")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"};"))))),(0,t.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"rule"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  test:"),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}}," /"),(0,t.yg)("span",{parentName:"div",style:{color:"#7EE787"}},"\\."),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},"(?:js"),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"|"),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},"ts"),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"|"),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},"jsx"),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"|"),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},"tsx)/"),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"i"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},",")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"};")))))),(0,t.yg)("p",null,"Prefer this:"),(0,t.yg)("div",{className:"shiki-twoslash-fragment"},(0,t.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"rule"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  test:"),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}}," /"),(0,t.yg)("span",{parentName:"div",style:{color:"#116329"}},"\\."),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"[jt]"),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},"sx"),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"?"),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},"/"),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"i"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},",")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"};"))))),(0,t.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"rule"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  test:"),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}}," /"),(0,t.yg)("span",{parentName:"div",style:{color:"#7EE787"}},"\\."),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"[jt]"),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},"sx"),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"?"),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},"/"),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"i"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},",")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"};")))))),(0,t.yg)("p",null,"Regular expressions are ",(0,t.yg)("em",{parentName:"p"},"not")," intended to be readable; they are designed for machine consumption. Convey the intent of a regular expression through test cases, not through making it verbose. Related to ",(0,t.yg)("strong",{parentName:"p"},"code for the average-intelligent"),"."),(0,t.yg)("h3",{id:"no-control-regex"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-control-regex"},(0,t.yg)("inlineCode",{parentName:"a"},"no-control-regex"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: warning"),(0,t.yg)("li",{parentName:"ul"},"Related:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"regexp/no-control-character"))))),(0,t.yg)("p",null,"Control characters are rarely used in regular expressions because they are rarely present in string literals at all. It's only set to warning so you should not fear disabling the rule where needed."),(0,t.yg)("h3",{id:"no-div-regex"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-div-regex"},(0,t.yg)("inlineCode",{parentName:"a"},"no-div-regex"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: off")),(0,t.yg)("p",null,"This is an extremely weird rule that forbids ",(0,t.yg)("inlineCode",{parentName:"p"},"=")," at the immediate beginning of a regex. We believe that the chance of one confusing ",(0,t.yg)("inlineCode",{parentName:"p"},"/=")," with ",(0,t.yg)("inlineCode",{parentName:"p"},"/=/")," is sparse, and most places have good syntax highlighting to distinguish them."),(0,t.yg)("h3",{id:"no-empty-character-class"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-empty-character-class"},(0,t.yg)("inlineCode",{parentName:"a"},"no-empty-character-class"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error"),(0,t.yg)("li",{parentName:"ul"},"Related:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"regexp/no-empty-character-class"))))),(0,t.yg)("p",null,"Empty character classes cause the regex to never match."),(0,t.yg)("h3",{id:"no-invalid-regexp"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-invalid-regexp"},(0,t.yg)("inlineCode",{parentName:"a"},"no-invalid-regexp"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error"),(0,t.yg)("li",{parentName:"ul"},"Related:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"regexp/no-invalid-regexp"))))),(0,t.yg)("p",null,"Write valid regular expressions. The only case where you might want to add a disable comment is when you are using novel syntax not supported by ESLint."),(0,t.yg)("h3",{id:"no-misleading-character-class"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-misleading-character-class"},(0,t.yg)("inlineCode",{parentName:"a"},"no-misleading-character-class"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error"),(0,t.yg)("li",{parentName:"ul"},"Related:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"regexp/no-misleading-unicode-character"))))),(0,t.yg)("p",null,"Do not write character classes that contain grapheme clusters or astral characters in general. Common ways to fix this are:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Change character class to a disjunction"),(0,t.yg)("li",{parentName:"ul"},"Use the ",(0,t.yg)("inlineCode",{parentName:"li"},"u")," flag, if you want to use astral characters"),(0,t.yg)("li",{parentName:"ul"},"Use ",(0,t.yg)("inlineCode",{parentName:"li"},"\\q{}")," and the ",(0,t.yg)("inlineCode",{parentName:"li"},"v")," flag, if you want to use grapheme clusters")),(0,t.yg)("h3",{id:"no-regex-spaces"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-regex-spaces"},(0,t.yg)("inlineCode",{parentName:"a"},"no-regex-spaces"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: off"),(0,t.yg)("li",{parentName:"ul"},"Related:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"regexp/prefer-quantifier"))))),(0,t.yg)("p",null,"Although we want to use concise syntax, multiple spaces in a regex is often useful to resemble constructs that readers are familiar with."),(0,t.yg)("div",{className:"shiki-twoslash-fragment"},(0,t.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// Matches a well-formatted table row")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"match"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," tableRow."),(0,t.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"match"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"("),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},"/"),(0,t.yg)("span",{parentName:"div",style:{color:"#116329"}},"\\|"),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}}," Column      "),(0,t.yg)("span",{parentName:"div",style:{color:"#116329"}},"\\|"),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}}," Another one "),(0,t.yg)("span",{parentName:"div",style:{color:"#116329"}},"\\|"),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},"/"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},");"))))),(0,t.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// Matches a well-formatted table row")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"match"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," tableRow."),(0,t.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"match"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"("),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},"/"),(0,t.yg)("span",{parentName:"div",style:{color:"#7EE787"}},"\\|"),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}}," Column      "),(0,t.yg)("span",{parentName:"div",style:{color:"#7EE787"}},"\\|"),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}}," Another one "),(0,t.yg)("span",{parentName:"div",style:{color:"#7EE787"}},"\\|"),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},"/"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},");")))))),(0,t.yg)("h3",{id:"no-useless-backreference"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-useless-backreference"},(0,t.yg)("inlineCode",{parentName:"a"},"no-useless-backreference"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error"),(0,t.yg)("li",{parentName:"ul"},"Related:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"regexp/no-useless-backreference"))))),(0,t.yg)("p",null,"Do not write backreferences that always resolve to the empty string."),(0,t.yg)("h3",{id:"prefer-named-capture-group"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/prefer-named-capture-group"},(0,t.yg)("inlineCode",{parentName:"a"},"prefer-named-capture-group"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: warning"),(0,t.yg)("li",{parentName:"ul"},"Related:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"regexp/prefer-named-capture-group"))))),(0,t.yg)("p",null,"Named capture groups allow us to semantically identify each group. It also warns about those groups that should probably be explicitly marked as non-capturing groups."),(0,t.yg)("div",{className:"shiki-twoslash-fragment"},(0,t.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"rule"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// Is this capturing group actually useful? If I remove it, would it break")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// consumer code?")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  test:"),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}}," /"),(0,t.yg)("span",{parentName:"div",style:{color:"#116329"}},"\\."),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},"(jpe"),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"?"),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},"g"),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"|"),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},"png"),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"|"),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},"webp)/"),(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"i"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},",")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"};"))))),(0,t.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"rule"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," {")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// Is this capturing group actually useful? If I remove it, would it break")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// consumer code?")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  test:"),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}}," /"),(0,t.yg)("span",{parentName:"div",style:{color:"#7EE787"}},"\\."),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},"(jpe"),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"?"),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},"g"),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"|"),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},"png"),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"|"),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},"webp)/"),(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"i"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},",")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"};")))))),(0,t.yg)("p",null,"Ultimately, this makes refactor less risky because addition of a capturing group does not shift the other indices."),(0,t.yg)("div",{className:"shiki-twoslash-fragment"},(0,t.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"diff"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#82071E"}},"- const commitPattern = /(.+),(.+)/;")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#116329"}},"+ const commitPattern = /(.+),(.+),(\\d+)/;")),(0,t.yg)("div",{parentName:"code",className:"line"}),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"const date = commit.match(commitPattern)?.[1];")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"// Oops, I need to also change `[1]` to `[2]`..."))))),(0,t.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"diff"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FFA198"}},"- const commitPattern = /(.+),(.+)/;")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#7EE787"}},"+ const commitPattern = /(.+),(.+),(\\d+)/;")),(0,t.yg)("div",{parentName:"code",className:"line"}),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"const date = commit.match(commitPattern)?.[1];")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"// Oops, I need to also change `[1]` to `[2]`...")))))),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},"Named capture groups isn't strongly typed in TypeScript. See ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/microsoft/TypeScript/issues/32098"},"microsoft/TypeScript#32098"),". If you access ",(0,t.yg)("inlineCode",{parentName:"p"},"match.groups.someName"),", you will get ",(0,t.yg)("inlineCode",{parentName:"p"},"| undefined")," under ",(0,t.yg)("inlineCode",{parentName:"p"},"noUncheckedIndexAccess"),", even when ",(0,t.yg)("inlineCode",{parentName:"p"},"someName")," always exists. In this case, prefer using a non-null assertion to convey developer intent.")),(0,t.yg)("h3",{id:"prefer-regex-literals"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/prefer-regex-literals"},(0,t.yg)("inlineCode",{parentName:"a"},"prefer-regex-literals"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error"),(0,t.yg)("li",{parentName:"ul"},"Configuration:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Do not allow using ",(0,t.yg)("inlineCode",{parentName:"li"},"RegExp")," on a regex literal (",(0,t.yg)("inlineCode",{parentName:"li"},"disallowRedundantWrapping: true"),")")))),(0,t.yg)("p",null,"Only use the ",(0,t.yg)("inlineCode",{parentName:"p"},"RegExp")," constructor when either the source or the flags is dynamic. Otherwise, use a regex literal. This applies to regex literals with a lot of escaping, too."),(0,t.yg)("div",{className:"shiki-twoslash-fragment"},(0,t.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// Don't write:")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"new"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"RegExp"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},"("),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},'"https://jc-verse.github.io/js-style-guide/eslint-base/literals"'),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},");")),(0,t.yg)("div",{parentName:"code",className:"line"}),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// Write:")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},"/https:"),(0,t.yg)("span",{parentName:"div",style:{color:"#116329"}},"\\/\\/"),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},"jc-verse"),(0,t.yg)("span",{parentName:"div",style:{color:"#116329"}},"\\."),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},"github"),(0,t.yg)("span",{parentName:"div",style:{color:"#116329"}},"\\."),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},"io"),(0,t.yg)("span",{parentName:"div",style:{color:"#116329"}},"\\/"),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},"js-style-guide"),(0,t.yg)("span",{parentName:"div",style:{color:"#116329"}},"\\/"),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},"eslint-base"),(0,t.yg)("span",{parentName:"div",style:{color:"#116329"}},"\\/"),(0,t.yg)("span",{parentName:"div",style:{color:"#0A3069"}},"literals/"),(0,t.yg)("span",{parentName:"div",style:{color:"#24292F"}},";"))))),(0,t.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,t.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,t.yg)("div",{parentName:"pre",className:"code-container"},(0,t.yg)("code",{parentName:"div"},(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// Don't write:")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"new"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,t.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"RegExp"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"("),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},'"https://jc-verse.github.io/js-style-guide/eslint-base/literals"'),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},");")),(0,t.yg)("div",{parentName:"code",className:"line"}),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// Write:")),(0,t.yg)("div",{parentName:"code",className:"line"},(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},"/https:"),(0,t.yg)("span",{parentName:"div",style:{color:"#7EE787"}},"\\/\\/"),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},"jc-verse"),(0,t.yg)("span",{parentName:"div",style:{color:"#7EE787"}},"\\."),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},"github"),(0,t.yg)("span",{parentName:"div",style:{color:"#7EE787"}},"\\."),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},"io"),(0,t.yg)("span",{parentName:"div",style:{color:"#7EE787"}},"\\/"),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},"js-style-guide"),(0,t.yg)("span",{parentName:"div",style:{color:"#7EE787"}},"\\/"),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},"eslint-base"),(0,t.yg)("span",{parentName:"div",style:{color:"#7EE787"}},"\\/"),(0,t.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},"literals/"),(0,t.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")))))),(0,t.yg)("h3",{id:"require-unicode-regexp"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/require-unicode-regexp"},(0,t.yg)("inlineCode",{parentName:"a"},"require-unicode-regexp"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error"),(0,t.yg)("li",{parentName:"ul"},"Related:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"regexp/require-unicode-regexp"))))),(0,t.yg)("p",null,"Always use the ",(0,t.yg)("inlineCode",{parentName:"p"},"u")," or ",(0,t.yg)("inlineCode",{parentName:"p"},"v")," flag. This does not just enable additional features; it also disables legacy features, like strict mode for regexes. See ",(0,t.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp"},"deprecated regex features"),"."),(0,t.yg)("h2",{id:"symbols"},"Symbols"),(0,t.yg)("h3",{id:"symbol-description"},(0,t.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/symbol-description"},(0,t.yg)("inlineCode",{parentName:"a"},"symbol-description"))),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Severity: error")),(0,t.yg)("p",null,"Always provide a description for symbols. This is useful for debugging."))}g.isMDXComponent=!0}}]);