"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[215],{9916:(e,a,n)=>{n.d(a,{xA:()=>y,yg:()=>c});var t=n(3696);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function s(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?s(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=t.createContext({}),p=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},y=function(e){var a=p(e.components);return t.createElement(i.Provider,{value:a},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},g=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,y=o(e,["components","mdxType","originalType","parentName"]),d=p(n),g=r,c=d["".concat(i,".").concat(g)]||d[g]||m[g]||s;return n?t.createElement(c,l(l({ref:a},y),{},{components:n})):t.createElement(c,l({ref:a},y))}));function c(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=g;var o={};for(var i in a)hasOwnProperty.call(a,i)&&(o[i]=a[i]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<s;p++)l[p]=n[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}g.displayName="MDXCreateElement"},4801:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var t=n(8102),r=(n(3696),n(9916));const s={sidebar_position:4},l="Operators",o={unversionedId:"eslint-base/operators",id:"eslint-base/operators",title:"Operators",description:"This page discusses styles for all operators, including arithmetic, comparison, assignment, and other operators.",source:"@site/../docs/eslint-base/operators.md",sourceDirName:"eslint-base",slug:"/eslint-base/operators",permalink:"/js-style-guide/eslint-base/operators",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"Variables & names",permalink:"/js-style-guide/eslint-base/variables-names"},next:{title:"Control flow",permalink:"/js-style-guide/eslint-base/control-flow"}},i={},p=[{value:"Arithmetics",id:"arithmetics",level:2},{value:"<code>no-bitwise</code>",id:"no-bitwise",level:3},{value:"<code>prefer-exponentiation-operator</code>",id:"prefer-exponentiation-operator",level:3},{value:"Comparisons",id:"comparisons",level:2},{value:"<code>eqeqeq</code>",id:"eqeqeq",level:3},{value:"<code>no-compare-neg-zero</code>",id:"no-compare-neg-zero",level:3},{value:"<code>no-eq-null</code>",id:"no-eq-null",level:3},{value:"<code>no-self-compare</code>",id:"no-self-compare",level:3},{value:"<code>use-isnan</code>",id:"use-isnan",level:3},{value:"<code>yoda</code>",id:"yoda",level:3},{value:"Objects",id:"objects",level:2},{value:"<code>dot-notation</code>",id:"dot-notation",level:3},{value:"<code>new-cap</code>",id:"new-cap",level:3},{value:"<code>no-delete-var</code>",id:"no-delete-var",level:3},{value:"<code>no-new</code>",id:"no-new",level:3},{value:"<code>no-unsafe-optional-chaining</code>",id:"no-unsafe-optional-chaining",level:3},{value:"Use of <code>in</code>",id:"use-of-in",level:3},{value:"Boolean logic",id:"boolean-logic",level:2},{value:"<code>no-constant-binary-expression</code>",id:"no-constant-binary-expression",level:3},{value:"<code>no-extra-boolean-cast</code>",id:"no-extra-boolean-cast",level:3},{value:"<code>no-nested-ternary</code>",id:"no-nested-ternary",level:3},{value:"<code>no-ternary</code>",id:"no-ternary",level:3},{value:"<code>no-unneeded-ternary</code>",id:"no-unneeded-ternary",level:3},{value:"<code>no-unsafe-negation</code>",id:"no-unsafe-negation",level:3},{value:"Assignment",id:"assignment",level:2},{value:"<code>logical-assignment-operators</code>",id:"logical-assignment-operators",level:3},{value:"<code>no-cond-assign</code>",id:"no-cond-assign",level:3},{value:"<code>no-multi-assign</code>",id:"no-multi-assign",level:3},{value:"<code>no-plusplus</code>",id:"no-plusplus",level:3},{value:"<code>no-return-assign</code>",id:"no-return-assign",level:3},{value:"<code>no-self-assign</code>",id:"no-self-assign",level:3},{value:"<code>operator-assignment</code>",id:"operator-assignment",level:3},{value:"Others",id:"others",level:2},{value:"<code>no-implicit-coercion</code>",id:"no-implicit-coercion",level:3},{value:"<code>no-sequences</code>",id:"no-sequences",level:3},{value:"<code>no-void</code>",id:"no-void",level:3},{value:"<code>valid-typeof</code>",id:"valid-typeof",level:3}],y={toc:p},d="wrapper";function m(e){let{components:a,...n}=e;return(0,r.yg)(d,(0,t.A)({},y,n,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"operators"},"Operators"),(0,r.yg)("p",null,"This page discusses styles for all operators, including arithmetic, comparison, assignment, and other operators."),(0,r.yg)("h2",{id:"arithmetics"},"Arithmetics"),(0,r.yg)("h3",{id:"no-bitwise"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-bitwise"},(0,r.yg)("inlineCode",{parentName:"a"},"no-bitwise"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: off")),(0,r.yg)("p",null,"Bitwise operators are useful, efficient, and cool. We don't think disabling them are worthwhile."),(0,r.yg)("div",{className:"shiki-twoslash-fragment"},(0,r.yg)("pre",{parentName:"div",className:"shiki github-light twoslash lsp",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"enum"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#953800"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"enum Traits"},"Traits")),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"(enum member) Traits.USEFUL = 1"},"USEFUL")," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"1"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"<<"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"0"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},",")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"(enum member) Traits.EFFICIENT = 2"},"EFFICIENT")," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"1"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"<<"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"1"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},",")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"(enum member) Traits.OBSCURE = 4"},"OBSCURE")," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"1"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"<<"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"2"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},",")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"(enum member) Traits.COOL = 8"},"COOL")," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"1"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"<<"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"3"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},",")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"}")),(0,r.yg)("div",{parentName:"code",className:"line"},"\xa0"),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"const bitwise: number"},"bitwise")),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"enum Traits"},"Traits"),"."),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"(enum member) Traits.USEFUL = 1"},"USEFUL")),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"|"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"enum Traits"},"Traits"),"."),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"(enum member) Traits.EFFICIENT = 2"},"EFFICIENT")),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"|"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"enum Traits"},"Traits"),"."),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"(enum member) Traits.COOL = 8"},"COOL")),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},";"))))),(0,r.yg)("pre",{parentName:"div",className:"shiki github-dark twoslash lsp",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"enum"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FFA657"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"enum Traits"},"Traits")),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"(enum member) Traits.USEFUL = 1"},"USEFUL")," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"1"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"<<"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"0"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},",")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"(enum member) Traits.EFFICIENT = 2"},"EFFICIENT")," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"1"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"<<"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"1"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},",")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"(enum member) Traits.OBSCURE = 4"},"OBSCURE")," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"1"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"<<"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"2"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},",")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"(enum member) Traits.COOL = 8"},"COOL")," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"1"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"<<"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"3"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},",")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"}")),(0,r.yg)("div",{parentName:"code",className:"line"},"\xa0"),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"const bitwise: number"},"bitwise")),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"enum Traits"},"Traits"),"."),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"(enum member) Traits.USEFUL = 1"},"USEFUL")),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"|"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"enum Traits"},"Traits"),"."),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"(enum member) Traits.EFFICIENT = 2"},"EFFICIENT")),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"|"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"enum Traits"},"Traits"),"."),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"(enum member) Traits.COOL = 8"},"COOL")),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")))))),(0,r.yg)("h3",{id:"prefer-exponentiation-operator"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/prefer-exponentiation-operator"},(0,r.yg)("inlineCode",{parentName:"a"},"prefer-exponentiation-operator"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error")),(0,r.yg)("p",null,"Use exponentiation instead of ",(0,r.yg)("inlineCode",{parentName:"p"},"Math.pow"),". This works with BigInts too."),(0,r.yg)("h2",{id:"comparisons"},"Comparisons"),(0,r.yg)("h3",{id:"eqeqeq"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/eqeqeq"},(0,r.yg)("inlineCode",{parentName:"a"},"eqeqeq"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error"),(0,r.yg)("li",{parentName:"ul"},"Configuration:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Always require ",(0,r.yg)("inlineCode",{parentName:"li"},"===")," (",(0,r.yg)("inlineCode",{parentName:"li"},'"always"'),")"),(0,r.yg)("li",{parentName:"ul"},"Require strict comparison with ",(0,r.yg)("inlineCode",{parentName:"li"},"null")," (",(0,r.yg)("inlineCode",{parentName:"li"},'null: "always"'),")")))),(0,r.yg)("p",null,"Regular equality can result in surprising results (e.g. ",(0,r.yg)("inlineCode",{parentName:"p"},'1 == "1"'),"). Although this is partly mitigated by TypeScript's type-checking, it can still become a pitfall on module boundaries without strict input validations."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"null")," is not exempted from this rule. We require you to explicitly check for ",(0,r.yg)("inlineCode",{parentName:"p"},"null")," with ",(0,r.yg)("inlineCode",{parentName:"p"},"===")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"!=="),", because without TypeScript, your code may not work against ",(0,r.yg)("inlineCode",{parentName:"p"},"document.all"),". ",(0,r.yg)("inlineCode",{parentName:"p"},"a === null || a === undefined")," is not exactly equivalent to ",(0,r.yg)("inlineCode",{parentName:"p"},"a == null"),". If you find it too pedantic, consider toggling it to ",(0,r.yg)("inlineCode",{parentName:"p"},'null: "ignore"')," yourself."),(0,r.yg)("div",{className:"shiki-twoslash-fragment"},(0,r.yg)("pre",{parentName:"div",className:"shiki github-light twoslash lsp",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"function"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#8250DF"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"function foo(a?: string | null): string"},"foo")),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"("),(0,r.yg)("span",{parentName:"div",style:{color:"#953800"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"(parameter) a: string | null | undefined"},"a")),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"?:"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"string"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"|"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"null"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},") {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"if"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," (",(0,r.yg)("data-lsp",{parentName:"span",lsp:"(parameter) a: string | null | undefined"},"a")," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"==="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"null"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"||"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"(parameter) a: string | undefined"},"a")," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"==="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"var undefined"},"undefined")),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},") "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"return"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0A3069"}},'"Nullish"'),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},";")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"return"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"(parameter) a: string"},"a"),"; "),(0,r.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// Only strings are left here")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"}"))))),(0,r.yg)("pre",{parentName:"div",className:"shiki github-dark twoslash lsp",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"function"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"function foo(a?: string | null): string"},"foo")),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"("),(0,r.yg)("span",{parentName:"div",style:{color:"#FFA657"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"(parameter) a: string | null | undefined"},"a")),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"?:"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"string"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"|"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"null"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},") {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"if"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," (",(0,r.yg)("data-lsp",{parentName:"span",lsp:"(parameter) a: string | null | undefined"},"a")," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"==="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"null"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"||"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"(parameter) a: string | undefined"},"a")," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"==="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"var undefined"},"undefined")),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},") "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"return"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},'"Nullish"'),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"return"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"(parameter) a: string"},"a"),"; "),(0,r.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// Only strings are left here")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"}")))))),(0,r.yg)("h3",{id:"no-compare-neg-zero"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-compare-neg-zero"},(0,r.yg)("inlineCode",{parentName:"a"},"no-compare-neg-zero"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error")),(0,r.yg)("p",null,"Comparing against negative zero is either a typo (an extra ",(0,r.yg)("inlineCode",{parentName:"p"},"-"),") or is intended to be ",(0,r.yg)("inlineCode",{parentName:"p"},"Object.is"),". In either case, such usage should be reported."),(0,r.yg)("h3",{id:"no-eq-null"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-eq-null"},(0,r.yg)("inlineCode",{parentName:"a"},"no-eq-null"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error")),(0,r.yg)("p",null,"This is a subset of ",(0,r.yg)("inlineCode",{parentName:"p"},"eqeqeq"),". Again, you may turn this off if the project doesn't care about ",(0,r.yg)("inlineCode",{parentName:"p"},"document.all"),"."),(0,r.yg)("h3",{id:"no-self-compare"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-self-compare"},(0,r.yg)("inlineCode",{parentName:"a"},"no-self-compare"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error")),(0,r.yg)("p",null,"See ",(0,r.yg)("a",{parentName:"p",href:"#no-self-assign"},(0,r.yg)("inlineCode",{parentName:"a"},"no-self-assign")),". If you want to test for ",(0,r.yg)("inlineCode",{parentName:"p"},"NaN"),", use ",(0,r.yg)("inlineCode",{parentName:"p"},"Number.isNaN"),"."),(0,r.yg)("h3",{id:"use-isnan"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/use-isnan"},(0,r.yg)("inlineCode",{parentName:"a"},"use-isnan"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error"),(0,r.yg)("li",{parentName:"ul"},"Configuration:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Do not write ",(0,r.yg)("inlineCode",{parentName:"li"},"case NaN")," (",(0,r.yg)("inlineCode",{parentName:"li"},'"enforceForSwitchCase": true'),")"),(0,r.yg)("li",{parentName:"ul"},"Do not write ",(0,r.yg)("inlineCode",{parentName:"li"},".indexOf(NaN)")," (",(0,r.yg)("inlineCode",{parentName:"li"},'"enforceForIndexOf": true'),")")))),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"NaN")," never compares equal to anything, so ",(0,r.yg)("inlineCode",{parentName:"p"},"x === NaN")," is likely a mistake. Other cases where ",(0,r.yg)("inlineCode",{parentName:"p"},"===")," semantics is used, including ",(0,r.yg)("inlineCode",{parentName:"p"},"switch-case")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"indexOf"),", should also not compare against ",(0,r.yg)("inlineCode",{parentName:"p"},"NaN"),". Use ",(0,r.yg)("inlineCode",{parentName:"p"},"Number.isNaN")," instead."),(0,r.yg)("h3",{id:"yoda"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/yoda"},(0,r.yg)("inlineCode",{parentName:"a"},"yoda"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error"),(0,r.yg)("li",{parentName:"ul"},"Configuration:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Always require the literal to be on the right (",(0,r.yg)("inlineCode",{parentName:"li"},'"never"'),")"),(0,r.yg)("li",{parentName:"ul"},"Allow ",(0,r.yg)("inlineCode",{parentName:"li"},"0 <= x && x <= 1")," style (",(0,r.yg)("inlineCode",{parentName:"li"},"exceptRange: true"),")")))),(0,r.yg)("p",null,"Yoda conditions make code harder to read. With proper formatting and linting, there's no way ",(0,r.yg)("inlineCode",{parentName:"p"},"===")," can be confused with ",(0,r.yg)("inlineCode",{parentName:"p"},"="),". The only allowed case is range comparisons, which simulates the ",(0,r.yg)("inlineCode",{parentName:"p"},"0 <= x <= 1")," style."),(0,r.yg)("h2",{id:"objects"},"Objects"),(0,r.yg)("h3",{id:"dot-notation"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/dot-notation"},(0,r.yg)("inlineCode",{parentName:"a"},"dot-notation"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error"),(0,r.yg)("li",{parentName:"ul"},"Configuration:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Keywords are treated the same as ordinary properties (non-ES3 compatible) (",(0,r.yg)("inlineCode",{parentName:"li"},"allowKeywords: true"),")")))),(0,r.yg)("p",null,"From the ESLint docs:"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"the dot notation is often preferred because it is easier to read, less verbose, and works better with aggressive JavaScript minimizers.")),(0,r.yg)("p",null,"There's no exception to this rule. We turn off the ",(0,r.yg)("inlineCode",{parentName:"p"},"noPropertyAccessFromIndexSignature")," TS option, and we don't use TS ",(0,r.yg)("inlineCode",{parentName:"p"},"private"),"/",(0,r.yg)("inlineCode",{parentName:"p"},"protected")," members, so there's no reason to use bracket notation."),(0,r.yg)("h3",{id:"new-cap"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/new-cap"},(0,r.yg)("inlineCode",{parentName:"a"},"new-cap"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error"),(0,r.yg)("li",{parentName:"ul"},"Configuration:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Require capitalized names to be called with ",(0,r.yg)("inlineCode",{parentName:"li"},"new")," (",(0,r.yg)("inlineCode",{parentName:"li"},'"capIsNew": true'),")"),(0,r.yg)("li",{parentName:"ul"},"Require ",(0,r.yg)("inlineCode",{parentName:"li"},"new")," to only be called on capitalized names (",(0,r.yg)("inlineCode",{parentName:"li"},'"newIsCap": true'),")"),(0,r.yg)("li",{parentName:"ul"},"Check properties too (",(0,r.yg)("inlineCode",{parentName:"li"},'"properties": true'),")")))),(0,r.yg)("p",null,"This is purely a stylistic choice. Use capital iff you have a constructor. This is also checked by ",(0,r.yg)("inlineCode",{parentName:"p"},"naming-convention"),". If you are using constructors generically, still use uppercase:"),(0,r.yg)("div",{className:"shiki-twoslash-fragment"},(0,r.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"function"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"clone"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"("),(0,r.yg)("span",{parentName:"div",style:{color:"#953800"}},"obj"),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},":"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"object"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},") {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"Ctor"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," obj."),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"constructor"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"?.["),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"Symbol"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},".species] "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"??"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," obj."),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"constructor"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"??"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"Object"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},";")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"return"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"new"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"Ctor"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"();")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"}"))))),(0,r.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"function"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"clone"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"("),(0,r.yg)("span",{parentName:"div",style:{color:"#FFA657"}},"obj"),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},":"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"object"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},") {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"Ctor"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," obj."),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"constructor"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"?.["),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"Symbol"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},".species] "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"??"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," obj."),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"constructor"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"??"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"Object"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"return"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"new"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"Ctor"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"();")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"}")))))),(0,r.yg)("h3",{id:"no-delete-var"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-delete-var"},(0,r.yg)("inlineCode",{parentName:"a"},"no-delete-var"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"delete")," operator should only be used on object properties. Deleting anything else is either a no-op or a syntax error. Notably, ",(0,r.yg)("inlineCode",{parentName:"p"},"delete x")," is (a) a syntax error in strict mode (b) a no-op in non-strict mode if you are trying to delete a ",(0,r.yg)("inlineCode",{parentName:"p"},"var")," (since variables are always non-configurable). If you want to delete a configurable global property, use ",(0,r.yg)("inlineCode",{parentName:"p"},"delete globalThis.x"),"."),(0,r.yg)("h3",{id:"no-new"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-new"},(0,r.yg)("inlineCode",{parentName:"a"},"no-new"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: off")),(0,r.yg)("p",null,"It's generally useful for detecting unused expressions, but in the case where we actually have unused ",(0,r.yg)("inlineCode",{parentName:"p"},"new")," expressions, they are almost 100% intentional. The most representative case is using ",(0,r.yg)("inlineCode",{parentName:"p"},"new URL()")," to test if a string is a valid URL (until in 2023 we had a ",(0,r.yg)("inlineCode",{parentName:"p"},"URL.canParse()")," function)."),(0,r.yg)("h3",{id:"no-unsafe-optional-chaining"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-unsafe-optional-chaining"},(0,r.yg)("inlineCode",{parentName:"a"},"no-unsafe-optional-chaining"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error"),(0,r.yg)("li",{parentName:"ul"},"Configuration:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Disallow optional chaining as arithmetic operands (",(0,r.yg)("inlineCode",{parentName:"li"},"disallowArithmeticOperators: true"),")"))),(0,r.yg)("li",{parentName:"ul"},"Related:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"ts(18048): 'a.foo' is possibly 'undefined'."))))),(0,r.yg)("p",null,"Optional chaining should be able to return ",(0,r.yg)("inlineCode",{parentName:"p"},"undefined")," by design. Using it in places where ",(0,r.yg)("inlineCode",{parentName:"p"},"undefined")," is not allowed potentially leads to runtime errors. This is also checked by TypeScript. If the left-hand side can never be nullish, remove the optional chaining (also enforced by ",(0,r.yg)("inlineCode",{parentName:"p"},"@typescript-eslint/no-unnecessary-condition"),")."),(0,r.yg)("h3",{id:"use-of-in"},"Use of ",(0,r.yg)("inlineCode",{parentName:"h3"},"in")),(0,r.yg)("p",null,"We ban the use of ",(0,r.yg)("inlineCode",{parentName:"p"},"in")," because of many reasons: (a) it's not type-safe (b) it tests for properties on the prototype which is prone to injection. If you want to narrow an unknown type, write a custom type guard (and optionally disable the rule for that line). If you want to use an object as a dictionary, use a ",(0,r.yg)("inlineCode",{parentName:"p"},"Map"),"."),(0,r.yg)("h2",{id:"boolean-logic"},"Boolean logic"),(0,r.yg)("h3",{id:"no-constant-binary-expression"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-constant-binary-expression"},(0,r.yg)("inlineCode",{parentName:"a"},"no-constant-binary-expression"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error"),(0,r.yg)("li",{parentName:"ul"},"Related:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"@typescript-eslint/no-unnecessary-condition"))))),(0,r.yg)("p",null,"Despite not using type information, this rule does its best at reliably testing for useless code and warning against potential mistakes."),(0,r.yg)("h3",{id:"no-extra-boolean-cast"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-extra-boolean-cast"},(0,r.yg)("inlineCode",{parentName:"a"},"no-extra-boolean-cast"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error"),(0,r.yg)("li",{parentName:"ul"},"Configuration:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Check logical expressions too (",(0,r.yg)("inlineCode",{parentName:"li"},'"enforceForLogicalOperands": true'),")")))),(0,r.yg)("p",null,"Do not cast to booleans when values are already in a boolean context."),(0,r.yg)("h3",{id:"no-nested-ternary"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-nested-ternary"},(0,r.yg)("inlineCode",{parentName:"a"},"no-nested-ternary"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: off")),(0,r.yg)("p",null,'You can nest ternaries if you want. It does come with readability tradeoffs, but 2 or 3 levels are generally fine, especially if it\'s written in a "continuous" style: ',(0,r.yg)("inlineCode",{parentName:"p"},"a ? b : c ? d : e"),". The benefit of using nested ternaries is to avoid side effects, because ",(0,r.yg)("inlineCode",{parentName:"p"},"if...else")," statements are clunky and sometimes require mutating variables/properties."),(0,r.yg)("h3",{id:"no-ternary"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-ternary"},(0,r.yg)("inlineCode",{parentName:"a"},"no-ternary"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: off")),(0,r.yg)("p",null,"Use ternaries. Use them to replace simple ",(0,r.yg)("inlineCode",{parentName:"p"},"if-else")," so you can avoid unneeded re-assignments."),(0,r.yg)("h3",{id:"no-unneeded-ternary"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-unneeded-ternary"},(0,r.yg)("inlineCode",{parentName:"a"},"no-unneeded-ternary"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error"),(0,r.yg)("li",{parentName:"ul"},"Configuration:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Disallow all ternaries that can be simplified (",(0,r.yg)("inlineCode",{parentName:"li"},"defaultAssignment: false"),")")))),(0,r.yg)("p",null,"Don't use ternaries when you don't need to. Such cases include when the two branches are ",(0,r.yg)("inlineCode",{parentName:"p"},"true")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"false")," (use ",(0,r.yg)("inlineCode",{parentName:"p"},"Boolean()")," instead) and ",(0,r.yg)("inlineCode",{parentName:"p"},"x ? x : y")," (use ",(0,r.yg)("inlineCode",{parentName:"p"},"??")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"||")," instead)."),(0,r.yg)("h3",{id:"no-unsafe-negation"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-unsafe-negation"},(0,r.yg)("inlineCode",{parentName:"a"},"no-unsafe-negation"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error"),(0,r.yg)("li",{parentName:"ul"},"Configuration:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Disallow negations to be used in comparisons (",(0,r.yg)("inlineCode",{parentName:"li"},"enforceForOrderingRelations: true"),")")))),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"!")," has higher precedence than relational operators (",(0,r.yg)("inlineCode",{parentName:"p"},"in"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"instanceof"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"<"),", ",(0,r.yg)("inlineCode",{parentName:"p"},">"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"<="),", ",(0,r.yg)("inlineCode",{parentName:"p"},">="),"), so ",(0,r.yg)("inlineCode",{parentName:"p"},"!a instanceof b")," is always a bug because a boolean is never an instance of any constructor (unless in corner cases when ",(0,r.yg)("inlineCode",{parentName:"p"},"b")," has a ",(0,r.yg)("inlineCode",{parentName:"p"},"@@hasInstance")," method). Prettier will add parentheses to make it more obvious (",(0,r.yg)("inlineCode",{parentName:"p"},"(!a) instanceof b"),"), but ESLint will help you catch it before formatting."),(0,r.yg)("h2",{id:"assignment"},"Assignment"),(0,r.yg)("p",null,"The general principle for using assignment operators is to treat them as statements, not expressions. You should generally not rely on their return values, including in conditions, chained assignments, and return statements."),(0,r.yg)("h3",{id:"logical-assignment-operators"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/logical-assignment-operators"},(0,r.yg)("inlineCode",{parentName:"a"},"logical-assignment-operators"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error"),(0,r.yg)("li",{parentName:"ul"},"Configuration:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Require all logical assignments to be used where possible (",(0,r.yg)("inlineCode",{parentName:"li"},'"always"'),")"),(0,r.yg)("li",{parentName:"ul"},"Require equivalent ",(0,r.yg)("inlineCode",{parentName:"li"},"if")," statements to be refactored to logical assignments (",(0,r.yg)("inlineCode",{parentName:"li"},"enforceForIfStatements: true"),")")))),(0,r.yg)("p",null,"This has the same motivation as ",(0,r.yg)("inlineCode",{parentName:"p"},"operator-assignment"),". Logical assignments also prevent unnecessary assignments\u2014if ",(0,r.yg)("inlineCode",{parentName:"p"},"a ??= b")," where ",(0,r.yg)("inlineCode",{parentName:"p"},"a")," is nullish, no assignment is made and no side effects are triggered."),(0,r.yg)("h3",{id:"no-cond-assign"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-cond-assign"},(0,r.yg)("inlineCode",{parentName:"a"},"no-cond-assign"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error"),(0,r.yg)("li",{parentName:"ul"},"Configuration:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Always disallow assignments in conditions (",(0,r.yg)("inlineCode",{parentName:"li"},'"always"'),")")))),(0,r.yg)("p",null,"Assignments in conditionals are a common source of mistakes."),(0,r.yg)("div",{className:"shiki-twoslash-fragment"},(0,r.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"if"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," (res.status "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"404"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},") {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"return"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0A3069"}},'"Not found"'),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},";")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"}")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// res.status becomes 404"))))),(0,r.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"if"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," (res.status "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"404"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},") {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"return"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},'"Not found"'),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"}")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// res.status becomes 404")))))),(0,r.yg)("p",null,"There is never a case where putting assignments in conditionals does not significantly subtract from readability."),(0,r.yg)("div",{className:"shiki-twoslash-fragment"},(0,r.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"function"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"setHeight"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"("),(0,r.yg)("span",{parentName:"div",style:{color:"#953800"}},"node"),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},":"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#953800"}},"HTMLElement"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},") {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"let"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," someNode "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," node;")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"do"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," someNode.style.height "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0A3069"}},'"100px"'),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},";")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"while"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," ((someNode "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," someNode.parentNode));")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// ^ First parse: this is an equality test?")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// ^ Second parse: this is an assignment. Is that a mistake?")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// ^ Third parse: oh, it's intended because of the extra brackets")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"}"))))),(0,r.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"function"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"setHeight"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"("),(0,r.yg)("span",{parentName:"div",style:{color:"#FFA657"}},"node"),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},":"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FFA657"}},"HTMLElement"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},") {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"let"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," someNode "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," node;")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"do"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," someNode.style.height "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},'"100px"'),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"while"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," ((someNode "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," someNode.parentNode));")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// ^ First parse: this is an equality test?")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// ^ Second parse: this is an assignment. Is that a mistake?")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// ^ Third parse: oh, it's intended because of the extra brackets")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"}")))))),(0,r.yg)("p",null,"Always write assignments as a separate statement:"),(0,r.yg)("div",{className:"shiki-twoslash-fragment"},(0,r.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"function"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"setHeight"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"("),(0,r.yg)("span",{parentName:"div",style:{color:"#953800"}},"node"),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},":"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#953800"}},"HTMLElement"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},") {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"let"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," someNode "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," node;")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"while"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," (someNode) {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"    someNode.style.height "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0A3069"}},'"100px"'),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},";")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"    someNode "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," someNode.parentNode;")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  }")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"}"))))),(0,r.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"function"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"setHeight"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"("),(0,r.yg)("span",{parentName:"div",style:{color:"#FFA657"}},"node"),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},":"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FFA657"}},"HTMLElement"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},") {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"let"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," someNode "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," node;")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"while"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," (someNode) {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"    someNode.style.height "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},'"100px"'),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"    someNode "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," someNode.parentNode;")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  }")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"}")))))),(0,r.yg)("p",null,"It also permits us to use ",(0,r.yg)("inlineCode",{parentName:"p"},"while")," instead of ",(0,r.yg)("inlineCode",{parentName:"p"},"do-while"),", which is still a minor readability improvement."),(0,r.yg)("p",null,"There are some cases where assignments in conditionals are useful, such as to reduce code duplication:"),(0,r.yg)("div",{className:"shiki-twoslash-fragment"},(0,r.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"let"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," input;")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"while"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," ((input "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"getInput"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"())) {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// ...")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"}"))))),(0,r.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"let"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," input;")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"while"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," ((input "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"getInput"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"())) {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// ...")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"}")))))),(0,r.yg)("p",null,"In such cases, you can either disable the rule, or use an explicit equality check (",(0,r.yg)("inlineCode",{parentName:"p"},"while ((input = getInput()) !== null)"),"). We don't make ESLint special-case this because Prettier automatically adds braces, which means it's not going to end up reporting anything."),(0,r.yg)("h3",{id:"no-multi-assign"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-multi-assign"},(0,r.yg)("inlineCode",{parentName:"a"},"no-multi-assign"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error"),(0,r.yg)("li",{parentName:"ul"},"Configuration:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Disallow all multiple assignments (",(0,r.yg)("inlineCode",{parentName:"li"},'"ignoreNonDeclaration": false'),")")))),(0,r.yg)("p",null,"Do not chain assignments (",(0,r.yg)("inlineCode",{parentName:"p"},"a = b = c = 1"),'). This is because Prettier will add parentheses, which makes the assignment not a "chain" anyway. Write multiple lines instead.'),(0,r.yg)("h3",{id:"no-plusplus"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-plusplus"},(0,r.yg)("inlineCode",{parentName:"a"},"no-plusplus"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: off")),(0,r.yg)("p",null,"Use ",(0,r.yg)("inlineCode",{parentName:"p"},"a++")," instead of ",(0,r.yg)("inlineCode",{parentName:"p"},"a += 1"),". It's shorter and more idiomatic. However, generally do not rely on the return value of ",(0,r.yg)("inlineCode",{parentName:"p"},"++"),"/",(0,r.yg)("inlineCode",{parentName:"p"},"--")," as it can be confusing."),(0,r.yg)("h3",{id:"no-return-assign"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-return-assign"},(0,r.yg)("inlineCode",{parentName:"a"},"no-return-assign"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error"),(0,r.yg)("li",{parentName:"ul"},"Configuration:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Disallow all assignments in return statements (",(0,r.yg)("inlineCode",{parentName:"li"},'"always"'),")")))),(0,r.yg)("p",null,"Again, you should not rely on the return value of assignments. If you have something to assign to (",(0,r.yg)("inlineCode",{parentName:"p"},"foo = ..."),"), then just return it on a separate statement (",(0,r.yg)("inlineCode",{parentName:"p"},"return foo"),"). We don't use ",(0,r.yg)("inlineCode",{parentName:"p"},"except-parens")," because Prettier will add parentheses anyway."),(0,r.yg)("h3",{id:"no-self-assign"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-self-assign"},(0,r.yg)("inlineCode",{parentName:"a"},"no-self-assign"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error"),(0,r.yg)("li",{parentName:"ul"},"Configuration:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Disallow all self-assignments (",(0,r.yg)("inlineCode",{parentName:"li"},'"props": true'),")")))),(0,r.yg)("p",null,"Self-assignments are usually a no-op. Self-assignment to properties could be no-op but the case where it's not is very confusing to readers. If your property accessor is not idempotent, you should probably refactor it. If this API comes from a library, use a comment."),(0,r.yg)("div",{className:"shiki-twoslash-fragment"},(0,r.yg)("pre",{parentName:"div",className:"shiki github-light",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"obj"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"get"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"foo"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"() {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"    "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"return"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"Math"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"."),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"random"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"();")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  },")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"set"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"foo"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"("),(0,r.yg)("span",{parentName:"div",style:{color:"#953800"}},"value"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},") {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"    console."),(0,r.yg)("span",{parentName:"div",style:{color:"#8250DF"}},"log"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"(value);")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"  },")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"};")),(0,r.yg)("div",{parentName:"code",className:"line"}),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"obj.foo "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," obj.foo; "),(0,r.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// ???"))))),(0,r.yg)("pre",{parentName:"div",className:"shiki github-dark",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"obj"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"get"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"foo"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"() {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"    "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"return"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"Math"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"."),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"random"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"();")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  },")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"set"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"foo"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"("),(0,r.yg)("span",{parentName:"div",style:{color:"#FFA657"}},"value"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},") {")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"    console."),(0,r.yg)("span",{parentName:"div",style:{color:"#D2A8FF"}},"log"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"(value);")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"  },")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"};")),(0,r.yg)("div",{parentName:"code",className:"line"}),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"obj.foo "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," obj.foo; "),(0,r.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// ???")))))),(0,r.yg)("h3",{id:"operator-assignment"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/operator-assignment"},(0,r.yg)("inlineCode",{parentName:"a"},"operator-assignment"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error"),(0,r.yg)("li",{parentName:"ul"},"Configuration:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Require all compound assignments to be used where possible (",(0,r.yg)("inlineCode",{parentName:"li"},'"always"'),")")))),(0,r.yg)("p",null,"Compound assignments enable you to write shorter code."),(0,r.yg)("h2",{id:"others"},"Others"),(0,r.yg)("h3",{id:"no-implicit-coercion"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-implicit-coercion"},(0,r.yg)("inlineCode",{parentName:"a"},"no-implicit-coercion"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error"),(0,r.yg)("li",{parentName:"ul"},"Configuration:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Disallow all implicit coercions (",(0,r.yg)("inlineCode",{parentName:"li"},"boolean: false, number: false, string: false, allow: []"),")")))),(0,r.yg)("p",null,'Many "idioms" do not lead to correct or fool-proof code. The common case of ',(0,r.yg)("inlineCode",{parentName:"p"},'"" + x')," ",(0,r.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion"},"is plain wrong"),". ",(0,r.yg)("inlineCode",{parentName:"p"},"+x")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"`${x}`")," are not as user-friendly as ",(0,r.yg)("inlineCode",{parentName:"p"},"Number(x)")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"String(x)")," because the former don't handle ",(0,r.yg)("inlineCode",{parentName:"p"},"BigInt")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"Symbol")," types, respectively. Always use the longer form for readability and for maximum safety."),(0,r.yg)("h3",{id:"no-sequences"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-sequences"},(0,r.yg)("inlineCode",{parentName:"a"},"no-sequences"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error")),(0,r.yg)("p",null,"Don't use the comma operator unless in the updater of a ",(0,r.yg)("inlineCode",{parentName:"p"},"for")," loop. Write multiple expressions using multiple statements."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Don't use the comma operator just to make a concise arrow."),(0,r.yg)("li",{parentName:"ul"},"Don't use the comma operator to discard the ",(0,r.yg)("inlineCode",{parentName:"li"},"this")," binding; use the ",(0,r.yg)("inlineCode",{parentName:"li"},"call")," method instead."),(0,r.yg)("li",{parentName:"ul"},"Don't use the comma operator to trigger indirect ",(0,r.yg)("inlineCode",{parentName:"li"},"eval")," (do you really need ",(0,r.yg)("inlineCode",{parentName:"li"},"eval"),"?). Use ",(0,r.yg)("inlineCode",{parentName:"li"},"eval?.()")," or ",(0,r.yg)("inlineCode",{parentName:"li"},"Function")," instead.")),(0,r.yg)("h3",{id:"no-void"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/no-void"},(0,r.yg)("inlineCode",{parentName:"a"},"no-void"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error"),(0,r.yg)("li",{parentName:"ul"},"Configuration:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Allow ",(0,r.yg)("inlineCode",{parentName:"li"},"void")," as expression statements (",(0,r.yg)("inlineCode",{parentName:"li"},"allowAsStatement: true"),")")))),(0,r.yg)("p",null,"Generally, ",(0,r.yg)("inlineCode",{parentName:"p"},"void")," operators are not needed. We don't need to use ",(0,r.yg)("inlineCode",{parentName:"p"},"void")," to signify that we are discarding the return value; for example, in arrow functions, we can just be more explicit by expanding the arrow function body. However, we allow ",(0,r.yg)("inlineCode",{parentName:"p"},"void")," as a statement because ",(0,r.yg)("inlineCode",{parentName:"p"},"@typescript-eslint/no-floating-promises")," requires it to explicitly discard promises."),(0,r.yg)("h3",{id:"valid-typeof"},(0,r.yg)("a",{parentName:"h3",href:"https://eslint.org/docs/rules/valid-typeof"},(0,r.yg)("inlineCode",{parentName:"a"},"valid-typeof"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Severity: error"),(0,r.yg)("li",{parentName:"ul"},"Configuration:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Do not allow comparing to anything other than string literals or another ",(0,r.yg)("inlineCode",{parentName:"li"},"typeof")," (",(0,r.yg)("inlineCode",{parentName:"li"},"requireStringLiterals: true"),")")))),(0,r.yg)("p",null,"You should only compare ",(0,r.yg)("inlineCode",{parentName:"p"},"typeof")," to string literals. ",(0,r.yg)("inlineCode",{parentName:"p"},"typeof x === typeof y")," is also considered a valid pattern. Other cases, such as saving the result of ",(0,r.yg)("inlineCode",{parentName:"p"},"typeof")," to a variable, are too niche and not allowed by default by this rule, but you can disable the rule in that case."),(0,r.yg)("p",null,"Note that TypeScript disallows certain but not all invalid comparisons."),(0,r.yg)("div",{className:"shiki-twoslash-fragment"},(0,r.yg)("pre",{parentName:"div",className:"shiki github-light twoslash lsp",style:{backgroundColor:"#ffffff",color:"#24292f"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"declare"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"const x: unknown"},"x")),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},":"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"unknown"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},";")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"declare"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"const"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"const type: string"},"type")),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},":"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"string"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},";")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"typeof"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"const x: unknown"},"x")," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"==="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0A3069"}},'"str"'),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},";")),(0,r.yg)("span",{parentName:"code",className:"error"},(0,r.yg)("span",{parentName:"span"},'This comparison appears to be unintentional because the types \'"string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"\' and \'"str"\' have no overlap.'),(0,r.yg)("span",{parentName:"span",className:"code"},"2367")),(0,r.yg)("span",{parentName:"code",className:"error-behind"},'This comparison appears to be unintentional because the types \'"string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"\' and \'"str"\' have no overlap.'),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"typeof"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"const x: unknown"},"x")," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"==="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},"1"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},";")),(0,r.yg)("span",{parentName:"code",className:"error"},(0,r.yg)("span",{parentName:"span"},"This comparison appears to be unintentional because the types 'string' and 'number' have no overlap."),(0,r.yg)("span",{parentName:"span",className:"code"},"2367")),(0,r.yg)("span",{parentName:"code",className:"error-behind"},"This comparison appears to be unintentional because the types 'string' and 'number' have no overlap."),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"typeof"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"const x: unknown"},"x")," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"==="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#0550AE"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"var undefined"},"undefined")),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}},"; "),(0,r.yg)("span",{parentName:"div",style:{color:"#6E7781"}},"// Valid ???")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"typeof"),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"const x: unknown"},"x")," "),(0,r.yg)("span",{parentName:"div",style:{color:"#CF222E"}},"==="),(0,r.yg)("span",{parentName:"div",style:{color:"#24292F"}}," ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"const type: string"},"type"),";"))))),(0,r.yg)("pre",{parentName:"div",className:"shiki github-dark twoslash lsp",style:{backgroundColor:"#0d1117",color:"#c9d1d9"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"ts"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"declare"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"const x: unknown"},"x")),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},":"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"unknown"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"declare"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"const"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"const type: string"},"type")),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},":"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"string"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"typeof"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"const x: unknown"},"x")," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"==="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#A5D6FF"}},'"str"'),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")),(0,r.yg)("span",{parentName:"code",className:"error"},(0,r.yg)("span",{parentName:"span"},'This comparison appears to be unintentional because the types \'"string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"\' and \'"str"\' have no overlap.'),(0,r.yg)("span",{parentName:"span",className:"code"},"2367")),(0,r.yg)("span",{parentName:"code",className:"error-behind"},'This comparison appears to be unintentional because the types \'"string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"\' and \'"str"\' have no overlap.'),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"typeof"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"const x: unknown"},"x")," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"==="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},"1"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},";")),(0,r.yg)("span",{parentName:"code",className:"error"},(0,r.yg)("span",{parentName:"span"},"This comparison appears to be unintentional because the types 'string' and 'number' have no overlap."),(0,r.yg)("span",{parentName:"span",className:"code"},"2367")),(0,r.yg)("span",{parentName:"code",className:"error-behind"},"This comparison appears to be unintentional because the types 'string' and 'number' have no overlap."),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"typeof"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"const x: unknown"},"x")," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"==="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," "),(0,r.yg)("span",{parentName:"div",style:{color:"#79C0FF"}},(0,r.yg)("data-lsp",{parentName:"span",lsp:"var undefined"},"undefined")),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}},"; "),(0,r.yg)("span",{parentName:"div",style:{color:"#8B949E"}},"// Valid ???")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"typeof"),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"const x: unknown"},"x")," "),(0,r.yg)("span",{parentName:"div",style:{color:"#FF7B72"}},"==="),(0,r.yg)("span",{parentName:"div",style:{color:"#C9D1D9"}}," ",(0,r.yg)("data-lsp",{parentName:"span",lsp:"const type: string"},"type"),";")))))))}m.isMDXComponent=!0}}]);